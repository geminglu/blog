<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>远方的博客</title>
  
  <subtitle>不忘初心</subtitle>
  <link href="https://geminglu.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://geminglu.github.io/blog/"/>
  <updated>2024-04-16T09:24:28.203Z</updated>
  <id>https://geminglu.github.io/blog/</id>
  
  <author>
    <name>gml</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何为Vue3组件标注TS类型</title>
    <link href="https://geminglu.github.io/blog/2023/09/29/vue3/%E5%A6%82%E4%BD%95%E4%B8%BAVue3%E7%BB%84%E4%BB%B6%E6%A0%87%E6%B3%A8TS%E7%B1%BB%E5%9E%8B/"/>
    <id>https://geminglu.github.io/blog/2023/09/29/vue3/%E5%A6%82%E4%BD%95%E4%B8%BAVue3%E7%BB%84%E4%BB%B6%E6%A0%87%E6%B3%A8TS%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-09-29T03:57:22.000Z</published>
    <updated>2024-04-16T09:24:28.203Z</updated>
    
    <content type="html"><![CDATA[<p>要说今年最热门的前端技术，Vue3 和 TS 绝对榜上有名了。据了解，已经有很多公司在使用 Vue3 + TS + Vite 开发新项目了。那么我们也不能落后，今天就给大家分享一下如何在 Vue3 组件中结合 Composition-Api 使用 TS 类型。如果有不会或者不熟的小伙伴，一起学起来吧！</p><h2 id="为-props-标注类型"><a href="#为-props-标注类型" class="headerlink" title="为 props 标注类型"></a>为 props 标注类型</h2><p>使用 <code>&lt;script setup&gt;</code><br>当使用 <code>&lt;script setup&gt;</code> 时，<code>defineProps()</code>宏函数支持从它的参数中推导类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  const props = defineProps(&#123;</span><br><span class="line">    foo: &#123; type: String, required: true &#125;,</span><br><span class="line">    bar: Number</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  props.foo // string</span><br><span class="line">  props.bar // number | undefined</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这被称为 运行时声明 ，因为传递给 defineProps() 的参数会作为运行时的 props 选项使用。<br>第二种方式，通过泛型参数来定义 props 的类型，这种方式更加直接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  const props = defineProps&lt;&#123;</span><br><span class="line">    foo: string</span><br><span class="line">    bar?: number</span><br><span class="line">  &#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// or</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  interface Props &#123;</span><br><span class="line">  foo: string</span><br><span class="line">  bar?: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const props = defineProps&lt;Props&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这被称为 基于类型的声明 ，编译器会尽可能地尝试根据类型参数推导出等价的运行时选项。这种方式的不足之处在于，失去了定义 <code>props</code> 默认值的能力。为了解决这个问题，我们可以使用 withDefaults 编译器宏：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Props &#123;</span><br><span class="line">  msg?: string</span><br><span class="line">    labels?: string[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  const props = withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class="line">    msg: &#x27;hello&#x27;,</span><br><span class="line">    labels: () =&gt; [&#x27;one&#x27;, &#x27;two&#x27;]</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>上面代码会被编译为等价的运行时<code>props</code>的<code>default</code>选项。<br>非 <code>&lt;script setup&gt;</code><br>如果没有使用 <code>&lt;script setup&gt;</code>，那么为了开启 props 的类型推导，必须使用<code>defineComponent()</code>。传入 <code>setup()</code> 的 <code>props</code>对象类型是从 props 选项中推导而来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineComponent &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default defineComponent(&#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      message: String</span><br><span class="line">    &#125;,</span><br><span class="line">    setup(props) &#123;</span><br><span class="line">      props.message // &lt;-- 类型：string</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="为-emits-标注类型"><a href="#为-emits-标注类型" class="headerlink" title="为 emits 标注类型"></a>为 emits 标注类型</h2><p>使用 <code>&lt;script setup&gt;</code><br>在<code>&lt;script setup&gt;</code>中，emit 函数的类型标注也可以使用 运行时声明 或者 基于类型的声明 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  // 运行时</span><br><span class="line">  const emit = defineEmits([&#x27;change&#x27;, &#x27;update&#x27;])</span><br><span class="line"></span><br><span class="line">  // 基于类型</span><br><span class="line">  const emit = defineEmits&lt;&#123;</span><br><span class="line">    (e: &#x27;change&#x27;, id: number): void</span><br><span class="line">      (e: &#x27;update&#x27;, value: string): void</span><br><span class="line">  &#125;&gt;()</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>我们可以看到，基于类型的声明 可以使我们对所触发事件的类型进行更细粒度的控制。<br>非 <code>&lt;script setup&gt;</code><br>若没有使用<code>&lt;script setup&gt;</code>，<code>defineComponent()</code>也可以根据<code>emits</code>选项推导暴露在<code>setup</code>上下文中的<code>emit</code>函数的类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineComponent &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default defineComponent(&#123;</span><br><span class="line">    emits: [&#x27;change&#x27;],</span><br><span class="line">    setup(props, &#123; emit &#125;) &#123;</span><br><span class="line">      emit(&#x27;change&#x27;) // &lt;-- 类型检查 / 自动补全</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="为-ref-标注类型"><a href="#为-ref-标注类型" class="headerlink" title="为 ref() 标注类型"></a>为 ref() 标注类型</h2><p>默认推导类型<br>ref 会根据初始化时的值自动推导其类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 推导出的类型：Ref&lt;number&gt;</span><br><span class="line">  const year = ref(2020)</span><br><span class="line"></span><br><span class="line">  // =&gt; TS Error: Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.</span><br><span class="line">  year.value = &#x27;2020&#x27;</span><br></pre></td></tr></table></figure><p>通过接口指定类型<br>有时我们可能想为 ref 内的值指定一个更复杂的类型，可以通过使用 Ref 这个接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">  import type &#123; Ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  const year: Ref&lt;string | number&gt; = ref(&#x27;2020&#x27;)</span><br><span class="line"></span><br><span class="line">  year.value = 2020 // 成功！</span><br></pre></td></tr></table></figure><p>通过泛型指定类型<br>或者，在调用 ref() 时传入一个泛型参数，来覆盖默认的推导行为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 得到的类型：Ref&lt;string | number&gt;</span><br><span class="line">const year = ref&lt;string | number&gt;(&#x27;2020&#x27;)</span><br><span class="line">year.value = 2020 // 成功！</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你指定了一个泛型参数但没有给出初始值，那么最后得到的就将是一个包含 undefined 的联合类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 推导得到的类型：Ref&lt;number | undefined&gt;</span><br><span class="line">const n = ref&lt;number&gt;()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="为-reactive-标注类型"><a href="#为-reactive-标注类型" class="headerlink" title="为 reactive() 标注类型"></a>为 reactive() 标注类型</h2><p>默认推导类型<br>reactive() 也会隐式地从它的参数中推导类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 推导得到的类型：&#123; title: string &#125;</span><br><span class="line">  const book = reactive(&#123; title: &#x27;Vue 3 指引&#x27; &#125;)</span><br></pre></td></tr></table></figure><p>通过接口指定类型<br>要显式地指定一个 reactive 变量的类型，我们可以使用接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">interface Book &#123;</span><br><span class="line">  title: string</span><br><span class="line">  year?: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const book: Book = reactive(&#123; title: &#x27;Vue 3 指引&#x27; &#125;)</span><br></pre></td></tr></table></figure><h2 id="为-computed-标注类型"><a href="#为-computed-标注类型" class="headerlink" title="为 computed() 标注类型"></a>为 computed() 标注类型</h2><p>默认推导类型<br>computed() 会自动从其计算函数的返回值上推导出类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">// 推导得到的类型：ComputedRef&lt;number&gt;</span><br><span class="line">const double = computed(() =&gt; count.value * 2)</span><br><span class="line"></span><br><span class="line">// =&gt; TS Error: Property &#x27;split&#x27; does not exist on type &#x27;number&#x27;</span><br><span class="line">const result = double.value.split(&#x27;&#x27;)</span><br></pre></td></tr></table></figure><p>通过泛型指定类型<br>你还可以通过泛型参数显式指定类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const double = computed&lt;number&gt;(() =&gt; &#123;</span><br><span class="line">  // 若返回值不是 number 类型则会报错</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="为事件处理函数标注类型"><a href="#为事件处理函数标注类型" class="headerlink" title="为事件处理函数标注类型"></a>为事件处理函数标注类型</h2><p>在处理原生 DOM 事件时，应该给事件处理函数的参数正确地标注类型。让我们看一下这个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  function handleChange(event) &#123;</span><br><span class="line">    // `event` 隐式地标注为 `any` 类型</span><br><span class="line">    console.log(event.target.value)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; @change=&quot;handleChange&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>没有类型标注时，这个 event 参数会隐式地标注为 any 类型。这也会在 tsconfig.json 中配置了 “strict”: true 或 “noImplicitAny”: true 时报出一个 TS 错误。因此，建议显式地为事件处理函数的参数标注类型。此外，你可能需要显式地强制转换 event 上的属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function handleChange(event: Event) &#123;</span><br><span class="line">  console.log((event.target as HTMLInputElement).value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为-provide-inject-标注类型"><a href="#为-provide-inject-标注类型" class="headerlink" title="为 provide &#x2F; inject 标注类型"></a>为 provide &#x2F; inject 标注类型</h2><p>provide 和 inject 通常会在不同的组件中运行。要正确地为注入的值标记类型，Vue 提供了一个 InjectionKey 接口，它是一个继承自 Symbol 的泛型类型，可以用来在提供者和消费者之间同步注入值的类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; provide, inject &#125; from &#x27;vue&#x27;</span><br><span class="line">import type &#123; InjectionKey &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const key = Symbol() as InjectionKey&lt;string&gt;</span><br><span class="line"></span><br><span class="line">provide(key, &#x27;foo&#x27;) // 若提供的是非字符串值会导致错误</span><br><span class="line"></span><br><span class="line">const foo = inject(key) // foo 的类型：string | undefined</span><br></pre></td></tr></table></figure><p>建议将注入 key 的类型放在一个单独的文件中，这样它就可以被多个组件导入。<br>当使用字符串注入 key 时，注入值的类型是 unknown，需要通过泛型参数显式声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const foo = inject&lt;string&gt;(&#x27;key&#x27;) // 类型：string | undefined</span><br></pre></td></tr></table></figure><p>注意注入的值仍然可以是 undefined，因为无法保证提供者一定会在运行时 provide 这个值。当提供了一个默认值后，这个 undefined 类型就可以被移除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const foo = inject&lt;string&gt;(&#x27;foo&#x27;, &#x27;bar&#x27;) // 类型：string</span><br></pre></td></tr></table></figure><p>如果你确定该值将始终被提供，则还可以强制转换该值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const foo = inject(&#x27;foo&#x27;) as string</span><br></pre></td></tr></table></figure><h2 id="为-dom-模板引用标注类型"><a href="#为-dom-模板引用标注类型" class="headerlink" title="为 dom 模板引用标注类型"></a>为 dom 模板引用标注类型</h2><p>模板 ref 需要通过一个显式指定的泛型参数和一个初始值 null 来创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  const el = ref&lt;HTMLInputElement | null&gt;(null)</span><br><span class="line"></span><br><span class="line">  onMounted(() =&gt; &#123;</span><br><span class="line">    el.value?.focus()</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input ref=&quot;el&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>注意为了严格的类型安全，有必要在访问 el.value 时使用可选链或类型守卫。这是因为直到组件被挂载前，这个 ref 的值都是初始的 null，并且 v-if 将引用的元素卸载时也会被设置为 null。</p><h2 id="为组件模板引用标注类型"><a href="#为组件模板引用标注类型" class="headerlink" title="为组件模板引用标注类型"></a>为组件模板引用标注类型</h2><p>有时，我们需要为一个子组件添加一个模板 ref，以便调用它公开的方法。比如，我们有一个 MyModal 子组件，它有一个打开模态框的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- MyModal.vue --&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  const isContentShown = ref(false)</span><br><span class="line">  const open = () =&gt; (isContentShown.value = true)</span><br><span class="line"></span><br><span class="line">  defineExpose(&#123;</span><br><span class="line">    open</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了获取 MyModal 的类型，我们首先需要通过 typeof 得到其类型，再使用 TypeScript 内置的 InstanceType 工具类型来获取其实例类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  import MyModal from &#x27;./MyModal.vue&#x27;</span><br><span class="line"></span><br><span class="line">  const modal = ref&lt;InstanceType&lt;typeof MyModal&gt; | null&gt;(null)</span><br><span class="line"></span><br><span class="line">  const openModal = () =&gt; &#123;</span><br><span class="line">    modal.value?.open()</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Ok，以上就是在 Vue3 组件中使用 TS 类型的基本方法，也是我最近的 Vue3 学习笔记。欢迎在评论区交流讨论，一起学习成长！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要说今年最热门的前端技术，Vue3 和 TS 绝对榜上有名了。据了解，已经有很多公司在使用 Vue3 + TS + Vite 开发新项目了。那么我们也不能落后，今天就给大家分享一下如何在 Vue3 组件中结合 Composition-Api 使用 TS 类型。如果有不会或者</summary>
      
    
    
    
    <category term="vue3" scheme="https://geminglu.github.io/blog/categories/vue3/"/>
    
    
    <category term="前端" scheme="https://geminglu.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue3" scheme="https://geminglu.github.io/blog/tags/vue3/"/>
    
    <category term="vue" scheme="https://geminglu.github.io/blog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>什么是vue3</title>
    <link href="https://geminglu.github.io/blog/2023/09/29/vue3/%E4%BB%80%E4%B9%88%E6%98%AFvue3/"/>
    <id>https://geminglu.github.io/blog/2023/09/29/vue3/%E4%BB%80%E4%B9%88%E6%98%AFvue3/</id>
    <published>2023-09-29T03:57:22.000Z</published>
    <updated>2024-04-16T09:24:28.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Vue3-简介"><a href="#1-Vue3-简介" class="headerlink" title="1.Vue3 简介"></a>1.Vue3 简介</h2><ul><li>2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号：One Piece（海贼王）</li><li>耗时 2 年多、<a class="link"   href="https://github.com/vuejs/vue-next/graphs/commit-activity" >2600+次提交<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://github.com/vuejs/rfcs/tree/master/active-rfcs" >30+个 RFC<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+" >600+次 PR<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://github.com/vuejs/vue-next/graphs/contributors" >99 位贡献者<i class="fas fa-external-link-alt"></i></a></li><li>github 上的 tags 地址：<a class="link"   href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0" >https://github.com/vuejs/vue-next/releases/tag/v3.0.0<i class="fas fa-external-link-alt"></i></a></li></ul><h2 id="2-Vue3-带来了什么"><a href="#2-Vue3-带来了什么" class="headerlink" title="2.Vue3 带来了什么"></a>2.Vue3 带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li>打包大小减少 41%</li><li>初次渲染快 55%, 更新渲染快 133%</li><li>内存减少 54%<br>……</li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li>使用 Proxy 代替 defineProperty 实现响应式</li><li>重写虚拟 DOM 的实现和 Tree-Shaking<br>……</li></ul><h3 id="3-拥抱-TypeScript"><a href="#3-拥抱-TypeScript" class="headerlink" title="3.拥抱 TypeScript"></a>3.拥抱 TypeScript</h3><ul><li>Vue3 可以更好的支持 TypeScript</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li>Composition API（组合 API）</li></ol><ul><li>setup 配置</li><li>ref 与 reactive</li><li>watch 与 watchEffect</li><li>provide 与 inject</li><li>……</li></ul><ol start="2"><li>新的内置组件</li></ol><ul><li>Fragment</li><li>Teleport</li><li>Suspense</li></ul><ol start="3"><li>其他改变</li></ol><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除 keyCode 支持作为 v-on 的修饰符</li><li>……</li></ul><h3 id="一、创建-Vue3-0-工程"><a href="#一、创建-Vue3-0-工程" class="headerlink" title="一、创建 Vue3.0 工程"></a>一、创建 Vue3.0 工程</h3><h3 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h3><p>官方文档：<a class="link"   href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create" >https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h3 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h3><p>官方文档：<a class="link"   href="https://v3.cn.vuejs.org/guide/installation.html#vite" >https://v3.cn.vuejs.org/guide/installation.html#vite<i class="fas fa-external-link-alt"></i></a></p><p>vite 官网：<a class="link"   href="https://vitejs.cn/" >https://vitejs.cn<i class="fas fa-external-link-alt"></i></a></p><ul><li>什么是 vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite 构建对比图</li></ul><p><img                         lazyload                       alt="image"                       data-src="/blog/images/43483607-c6c7-4b93-8d38-09d8d0e7b135.png"                                        ></p><p><img                         lazyload                       alt="image"                       data-src="/blog/images/2b9a572c-a88a-4d60-a408-9410e06eb74d.png"                                        ></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- vue3中模板中可以没有根标签 --&gt;</span><br><span class="line">  &lt;!-- &lt;img  alt=&quot;Vue logo&quot;  src=&quot;/blog./assets/logo.png&quot;  &gt;</span><br><span class="line">  &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot; /&gt; --&gt;</span><br><span class="line">  &lt;div&gt;姓名：&#123;&#123; name &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;年龄：&#123;&#123; age &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;职业：&#123;&#123; job.type &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;薪资：&#123;&#123; job.salary &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;爱好：&#123;&#123; hobby &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;sayHello&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// import HelloWorld from &quot;./components/HelloWorld.vue&quot;;</span><br><span class="line">import &#123; ref, reactive &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  // components: &#123;</span><br><span class="line">  //   HelloWorld,</span><br><span class="line">  // &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    let name = ref(&quot;张三&quot;);</span><br><span class="line">    let age = ref(18);</span><br><span class="line">    let job = reactive(&#123;</span><br><span class="line">      type: &quot;前端开发工程师&quot;,</span><br><span class="line">      salary: &quot;30K&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">    let hobby = reactive([&quot;抽烟&quot;, &quot;喝酒&quot;, &quot;烫头&quot;]);</span><br><span class="line">    function sayHello() &#123;</span><br><span class="line">      name.value = &quot;李四&quot;;</span><br><span class="line">      age.value = &quot;45&quot;;</span><br><span class="line">      job.type = &quot;UI设计师&quot;;</span><br><span class="line">      job.salary = &quot;10K&quot;;</span><br><span class="line">      hobby[0] = &quot;唱歌&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      name,</span><br><span class="line">      age,</span><br><span class="line">      job,</span><br><span class="line">      hobby,</span><br><span class="line">      sayHello,</span><br><span class="line">    &#125;;</span><br><span class="line">    // return (q) =&gt; &#123;</span><br><span class="line">    //   console.log(&quot;return&quot;, q, this);</span><br><span class="line">    //   return h(&quot;h1&quot;, &quot;dome&quot;);</span><br><span class="line">    // &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="常用-CompositionAPI"><a href="#常用-CompositionAPI" class="headerlink" title="常用 CompositionAPI"></a>常用 CompositionAPI</h2><p>官方文档: <a class="link"   href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html" >https://v3.cn.vuejs.org/guide/composition-api-introduction.html<i class="fas fa-external-link-alt"></i></a></p><h3 id="1-拉开序幕的-setup"><a href="#1-拉开序幕的-setup" class="headerlink" title="1.拉开序幕的 setup"></a>1.拉开序幕的 setup</h3><ol><li>理解：Vue3.0 中一个新的配置项，值为一个函数。</li><li>setup 是所有 Composition API（组合 API）“ 表演的舞台 ”。</li><li>组件中所用到的：数据、方法等等，均要配置在 setup 中。</li><li>setup 函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li>若返回一个渲染函数：则可以自定义渲染内容。（了解）</li></ol></li><li>注意点：<ol><li>尽量不要与 Vue2.x 配置混用<ul><li>Vue2.x 配置（data、methos、computed…）中可以访问到 setup 中的属性、方法。</li><li>但在 setup 中不能访问到 Vue2.x 配置（data、methos、computed…）。</li><li>如果有重名, setup 优先。</li></ul></li><li>setup 可以是 async 函数返回 Promise，但是必须结合 Suspense 和异步组件（defineAsyncComponent）一起使用</li></ol></li></ol><h3 id="2-ref-函数"><a href="#2-ref-函数" class="headerlink" title="2.ref 函数"></a>2.ref 函数</h3><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code><ul><li>创建一个包含响应式数据的引用对象（reference 对象，简称 ref 对象）。</li><li>JS 中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 “ 求助 ” 了 Vue3.0 中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h3 id="3-reactive-函数"><a href="#3-reactive-函数" class="headerlink" title="3.reactive 函数"></a>3.reactive 函数</h3><ul><li>作用: 定义一个对象类型的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个代理对象（Proxy 的实例对象，简称 proxy 对象）</li><li>reactive 定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h3 id="4-Vue3-0-中的响应式原理"><a href="#4-Vue3-0-中的响应式原理" class="headerlink" title="4.Vue3.0 中的响应式原理"></a>4.Vue3.0 中的响应式原理</h3><h4 id="vue2-x-的响应式"><a href="#vue2-x-的响应式" class="headerlink" title="vue2.x 的响应式"></a>vue2.x 的响应式</h4><ul><li>实现原理：<ul><li>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</li><li>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&quot;count&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>存在问题：<ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h4 id="Vue3-0-的响应式"><a href="#Vue3-0-的响应式" class="headerlink" title="Vue3.0 的响应式"></a>Vue3.0 的响应式</h4><ul><li>实现原理:<ul><li>通过 Proxy（代理）:   拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li><li>通过 Reflect（反射）:   对源对象的属性进行操作。</li><li>MDN 文档中描述的 Proxy 与 Reflect：<ul><li>Proxy：<a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" >https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects&#x2F;Proxy<i class="fas fa-external-link-alt"></i></a></li><li>Reflect：<a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" >https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects&#x2F;Reflect<i class="fas fa-external-link-alt"></i></a></li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line">  <span class="comment">// 拦截读取属性值</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, prop</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, prop, value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 拦截删除属性</span></span><br><span class="line">  <span class="title function_">deleteProperty</span>(<span class="params">target, prop</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, prop);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">name</span> = <span class="string">&quot;tom&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="5-reactive-对比-ref"><a href="#5-reactive-对比-ref" class="headerlink" title="5.reactive 对比 ref"></a>5.reactive 对比 ref</h3><ul><li>从定义数据角度对比：<ul><li>ref 用来定义：基本类型数据。</li><li>reactive 用来定义：对象（或数组）类型数据。</li><li>备注：ref 也可以用来定义对象（或数组）类型数据, 它内部会自动通过<code>reactive</code>转为代理对象。</li></ul></li><li>从原理角度对比：<ul><li>ref 通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive 通过使用 Proxy 来实现响应式（数据劫持）, 并通过 Reflect 操作源对象内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref 定义的数据：操作数据需要<code>.value</code>，读取数据时模板中直接读取不需要<code>.value</code>。</li><li>reactive 定义的数据：操作数据与读取数据：均不需要<code>.value</code>。</li></ul></li></ul><h3 id="6-setup-的两个注意点"><a href="#6-setup-的两个注意点" class="headerlink" title="6.setup 的两个注意点"></a>6.setup 的两个注意点</h3><ul><li>setup 执行的时机<ul><li>在 beforeCreate 之前执行一次，this 是 undefined。</li></ul></li><li>setup 的参数<ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在 props 配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- vue3中模板中可以没有根标签 --&gt;</span><br><span class="line">  &lt;HelloWorld :job=&quot;job&quot; :hobby=&quot;hobby&quot; @sayHello=&quot;sayHello&quot;&gt;</span><br><span class="line">    &lt;template v-slot:job&gt;</span><br><span class="line">      &lt;div&gt;姓名：&#123;&#123; name &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;年龄：&#123;&#123; age &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;button @click=&quot;sayHello()&quot;&gt;App组件的按钮&lt;/button&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/HelloWorld&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &quot;./components/HelloWorld.vue&quot;;</span><br><span class="line">import &#123; ref, reactive &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    let name = ref(&quot;张三&quot;);</span><br><span class="line">    let age = ref(18);</span><br><span class="line">    let job = reactive(&#123;</span><br><span class="line">      type: &quot;前端开发工程师&quot;,</span><br><span class="line">      salary: &quot;30K&quot;,</span><br><span class="line">    &#125;);</span><br><span class="line">    let hobby = reactive([&quot;抽烟&quot;, &quot;喝酒&quot;, &quot;烫头&quot;]);</span><br><span class="line">    function sayHello(j = &#123;&#125;, h = &quot;&quot;) &#123;</span><br><span class="line">      name.value = &quot;李四&quot;;</span><br><span class="line">      age.value = &quot;45&quot;;</span><br><span class="line">      job.type = j.type || &quot;UI设计师&quot;;</span><br><span class="line">      job.salary = j.salary || &quot;10K&quot;;</span><br><span class="line">      hobby[0] = h || &quot;唱歌&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      name,</span><br><span class="line">      age,</span><br><span class="line">      job,</span><br><span class="line">      hobby,</span><br><span class="line">      sayHello,</span><br><span class="line">    &#125;;</span><br><span class="line">    // return (q) =&gt; &#123;</span><br><span class="line">    //   console.log(&quot;return&quot;, q, this);</span><br><span class="line">    //   return h(&quot;h1&quot;, &quot;dome&quot;);</span><br><span class="line">    // &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;slot name=&quot;job&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;div&gt;职业：&#123;&#123; job.type &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;薪资：&#123;&#123; job.salary &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;爱好：&#123;&#123; hobby &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;test&quot;&gt;HelloWorld的按钮&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;HelloWorld&quot;,</span><br><span class="line">  props: [&quot;job&quot;, &quot;hobby&quot;],</span><br><span class="line">  emits: [&quot;sayHello&quot;],</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    function test() &#123;</span><br><span class="line">      const job = &#123;</span><br><span class="line">        type: &quot;JAVA开发&quot;,</span><br><span class="line">        salary: &quot;100K&quot;,</span><br><span class="line">      &#125;;</span><br><span class="line">      const hobby = &quot;跳&quot;;</span><br><span class="line">      context.emit(&quot;sayHello&quot;, job, hobby);</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123; test &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="其它-CompositionAPI"><a href="#其它-CompositionAPI" class="headerlink" title="其它 CompositionAPI"></a>其它 CompositionAPI</h2><h3 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a>shallowReactive 与 shallowRef</h3><ul><li>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</li><li>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</li><li>什么时候使用?<ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。</li></ul></li></ul><h3 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h3><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h3 id="toRaw-与-markRaw"><a href="#toRaw-与-markRaw" class="headerlink" title="toRaw 与 markRaw"></a>toRaw 与 markRaw</h3><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的响应式对象转为普通对象。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h3><ul><li>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</li><li>实现防抖效果：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;keyword&quot; /&gt;</span><br><span class="line">  &lt;h3&gt;&#123;&#123; keyword &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, customRef &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Demo&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span><br><span class="line">    //自定义一个myRef</span><br><span class="line">    function myRef(value, delay) &#123;</span><br><span class="line">      let timer;</span><br><span class="line">      //通过customRef去实现自定义</span><br><span class="line">      return customRef((track, trigger) =&gt; &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          get() &#123;</span><br><span class="line">            track(); //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">            return value;</span><br><span class="line">          &#125;,</span><br><span class="line">          set(newValue) &#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">            timer = setTimeout(() =&gt; &#123;</span><br><span class="line">              value = newValue;</span><br><span class="line">              trigger(); //告诉Vue去更新界面</span><br><span class="line">            &#125;, delay);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    let keyword = myRef(&quot;hello&quot;, 500); //使用程序员自定义的ref</span><br><span class="line">    return &#123;</span><br><span class="line">      keyword,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h3><p><img                         lazyload                       alt="image"                       data-src="/blog/images/0ab2bf3c-6e52-44d4-b3ec-3367eb891a08.png"                                        ></p><ul><li>作用：实现祖与后代组件间通信</li><li>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</li><li>具体写法：<ol><li>祖组件中：</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>后代组件中：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h3><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h3 id="getCurrentInstance"><a href="#getCurrentInstance" class="headerlink" title="getCurrentInstance"></a>getCurrentInstance</h3><p><code>getCurrentInstance</code>支持访问内部组件实例。<br><code>getCurrentInstance</code>只暴露给高阶使用场景，典型的比如在库中。强烈反对在应用的代码中使用 <code>getCurrentInstance</code>。请不要把它当作在组合式 API 中获取 this 的替代方案来使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyComponent</span> = &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> internalInstance = <span class="title function_">getCurrentInstance</span>();</span><br><span class="line"></span><br><span class="line">    internalInstance.<span class="property">appContext</span>.<span class="property">config</span>.<span class="property">globalProperties</span>; <span class="comment">// 访问 globalProperties</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>getCurrentInstance</code>只能在 <a class="link"   href="https://v3.cn.vuejs.org/api/composition-api.html#setup" >setup<i class="fas fa-external-link-alt"></i></a> 或<a class="link"   href="https://v3.cn.vuejs.org/api/composition-api.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" >生命周期钩子<i class="fas fa-external-link-alt"></i></a>中调用。<br>如需在 <a class="link"   href="https://v3.cn.vuejs.org/api/composition-api.html#setup" >setup<i class="fas fa-external-link-alt"></i></a> 或<a class="link"   href="https://v3.cn.vuejs.org/api/composition-api.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" >生命周期钩子<i class="fas fa-external-link-alt"></i></a>外使用，请先在 setup 中调用<code>getCurrentInstance()</code>获取该实例然后再使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyComponent</span> = &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> internalInstance = <span class="title function_">getCurrentInstance</span>(); <span class="comment">// 有效</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> id = <span class="title function_">useComponentId</span>(); <span class="comment">// 有效</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">getCurrentInstance</span>(); <span class="comment">// 无效</span></span><br><span class="line">      <span class="title function_">useComponentId</span>(); <span class="comment">// 无效</span></span><br><span class="line"></span><br><span class="line">      internalInstance; <span class="comment">// 有效</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">getCurrentInstance</span>(); <span class="comment">// 有效</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span></span><br><span class="line">      <span class="title function_">h</span>(</span><br><span class="line">        <span class="string">&quot;button&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">onClick</span>: handleClick,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">`uid: <span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">      );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组合式函数中调用也可以正常执行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useComponentId</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getCurrentInstance</span>().<span class="property">uid</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h3><h4 id="Options-API-存在的问题"><a href="#Options-API-存在的问题" class="headerlink" title="Options API 存在的问题"></a>Options API 存在的问题</h4><p>使用传统 OptionsAPI 中，新增或者修改一个需求，就需要分别在 data，methods，computed 里修改 。<br><img                         lazyload                       alt="image"                       data-src="/blog/images/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.gif"                                        ><img                         lazyload                       alt="image"                       data-src="/blog/images/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.gif"                                        ></p><h4 id="Composition-API-的优势-1"><a href="#Composition-API-的优势-1" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h4><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。<br><img                         lazyload                       alt="image"                       data-src="/blog/images/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.gif"                                        ><img                         lazyload                       alt="image"                       data-src="/blog/images/6cc55165c0e34069a75fe36f8712eb80~tplv-rk.gif"                                        ></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>vue2.x 的生命周期<br><img                         lazyload                       alt="image"                       data-src="/blog/images/1569655790584-a5e09649-ecbe-40eb-864c-fe110dd31efc.png"                        alt="vue2.x的生命周期图"                 ></p><p>vue3.0 的生命周期<br><img                         lazyload                       alt="image"                       data-src="/blog/images/4c612100-eda5-4233-9e83-9367b4ade839.svg"                        alt="vue3.0的生命周期"                 ></p><ul><li>Vue3.0 中可以继续使用 Vue2.x 中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0 也提供了 Composition API 形式的生命周期钩子，与 Vue2.x 中钩子对应关系如下：<ul><li><code>beforeCreate</code>&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li><li><code>created</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li><li><code>beforeMount</code> &#x3D;&#x3D;&#x3D;&gt;<code>onBeforeMount</code></li><li><code>mounted</code>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>&#x3D;&#x3D;&#x3D;&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> &#x3D;&#x3D;&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUnmounted</code></li></ul></li><li>如果在配置项和 Composition API 都使用了生命周期，那么 Composition API 优先被调用。</li><li>如果有组件嵌套会先执行父级的钩子。如下图</li><li><img                         lazyload                       alt="image"                       data-src="/blog/images/23r23er2q3wrd.png"                        alt="image.png"                 ><img                         lazyload                       alt="image"                       data-src="/blog/images/qwe23r23.png"                        alt="image.png"                 ><img                         lazyload                       alt="image"                       data-src="/blog/images/2131e2.png"                        alt="image.png"                 ></li></ul><h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h2><ul><li>作用：创建一个 ref 对象，其 value 值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;姓名：&#123;&#123; name &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;年龄：&#123;&#123; age &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;职业：&#123;&#123; job.j1.type &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;薪资：&#123;&#123; job.j1.salary &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    兴趣：&lt;span v-for=&quot;item in hobby&quot; :key=&quot;item&quot;&gt;&#123;&#123; item &#125;&#125;；&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;sayHello()&quot;&gt;App组件的按钮&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; toRefs, reactive &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;toRefToRefs&amp;toRefs&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const data = reactive(&#123;</span><br><span class="line">      name: &quot;张三&quot;,</span><br><span class="line">      age: 18,</span><br><span class="line">      job: &#123;</span><br><span class="line">        j1: &#123;</span><br><span class="line">          type: &quot;前端开发工程师&quot;,</span><br><span class="line">          salary: &quot;30K&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      hobby: [&quot;抽烟&quot;, &quot;喝酒&quot;, &quot;烫头&quot;],</span><br><span class="line">    &#125;);</span><br><span class="line">    function sayHello() &#123;</span><br><span class="line">      data.name = &quot;李四&quot;;</span><br><span class="line">      data.age = &quot;9&quot;;</span><br><span class="line">      data.job.j1.type = &quot;UI设计师&quot;;</span><br><span class="line">      data.job.j1.salary = &quot;10K&quot;;</span><br><span class="line">      data.hobby[0] = &quot;唱歌&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      ...toRefs(data),</span><br><span class="line">      sayHello,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h2><h3 id="1-computed-函数"><a href="#1-computed-函数" class="headerlink" title="1.computed 函数"></a>1.computed 函数</h3><ul><li>与 Vue2.x 中 computed 配置功能一致</li><li>写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-watch-函数"><a href="#2-watch-函数" class="headerlink" title="2.watch 函数"></a>2.watch 函数</h3><ul><li>与 Vue2.x 中 watch 配置功能一致</li><li>两个小“坑”：<ul><li>监视 reactive 定义的响应式数据时：oldValue 无法正确获取、强制开启了深度监视（deep 配置失效）。</li><li>监视 reactive 定义的响应式数据中某个属性时：deep 配置有效。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  sum,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum, msg], <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum或msg变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  person,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">); <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> person.<span class="property">job</span>,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person的job变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  [<span class="function">() =&gt;</span> person.<span class="property">job</span>, <span class="function">() =&gt;</span> person.<span class="property">name</span>],</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person的job变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> person.<span class="property">job</span>,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;person的job变化了&quot;</span>, newValue, oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">); <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure><h3 id="3-watchEffect-函数"><a href="#3-watchEffect-函数" class="headerlink" title="3.watchEffect 函数"></a>3.watchEffect 函数</h3><ul><li>watch 的套路是：既要指明监视的属性，也要指明监视的回调。</li><li>watchEffect 的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</li><li>watchEffect 有点像 computed：<ul><li>但 computed 注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而 watchEffect 更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> x1 = sum.<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">const</span> x2 = person.<span class="property">age</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;watchEffect配置的回调执行了&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="其他变化"><a href="#其他变化" class="headerlink" title="其他变化"></a>其他变化</h2><h3 id="1-全局-API-的转移"><a href="#1-全局-API-的转移" class="headerlink" title="1.全局 API 的转移"></a>1.全局 API 的转移</h3><ul><li>Vue 2.x 有许多全局 API 和配置。<ul><li>例如：注册全局组件、注册全局指令等。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Vue3.0 中对这些 API 做出了调整：<ul><li>将全局的 API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上<br>| 2.x 全局 API（<code>Vue</code><br>） | 3.x 实例 API (<code>app</code><br>) |<br>| — | — |<br>| Vue.config.xxxx | app.config.xxxx |<br>| Vue.config.productionTip | <strong>移除</strong> |<br>| Vue.component | app.component |<br>| Vue.directive | app.directive |<br>| Vue.mixin | app.mixin |<br>| Vue.use | app.use |<br>| Vue.prototype | app.config.globalProperties |</li></ul></li></ul><h3 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h3><ul><li>data 选项应始终被声明为一个函数。</li><li>过度类名的更改：<ul><li>Vue2.x 写法</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Vue3.x 写法</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>移除</strong>keyCode 作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></li><li><strong>移除</strong><code>v-on.native</code>修饰符<ul><li>父组件中绑定事件</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ul><li>子组件中声明自定义事件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  emits: [&quot;close&quot;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>移除</strong>过滤器（filter）<blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li></ul><h2 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h2><h3 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h3><ul><li>在 Vue2 中: 组件必须有一个根标签</li><li>在 Vue3 中: 组件可以没有根标签, 内部会将多个标签包含在一个 Fragment 虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h3 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h3><ul><li>什么是 Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong>组件 html 结构</strong>移动到指定位置的技术。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure><h3 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h3><ul><li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</li><li>使用步骤：</li><li>异步引入组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./components/Child.vue&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">    &lt;Suspense&gt;</span><br><span class="line">      &lt;template v-slot:default&gt;</span><br><span class="line">        &lt;Child /&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-slot:fallback&gt;</span><br><span class="line">        &lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Suspense&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Vue3-简介&quot;&gt;&lt;a href=&quot;#1-Vue3-简介&quot; class=&quot;headerlink&quot; title=&quot;1.Vue3 简介&quot;&gt;&lt;/a&gt;1.Vue3 简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号：</summary>
      
    
    
    
    <category term="vue3" scheme="https://geminglu.github.io/blog/categories/vue3/"/>
    
    
    <category term="前端" scheme="https://geminglu.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue3" scheme="https://geminglu.github.io/blog/tags/vue3/"/>
    
    <category term="vue" scheme="https://geminglu.github.io/blog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>自定义hook函数</title>
    <link href="https://geminglu.github.io/blog/2023/09/29/vue3/%E8%87%AA%E5%AE%9A%E4%B9%89hook%E5%87%BD%E6%95%B0/"/>
    <id>https://geminglu.github.io/blog/2023/09/29/vue3/%E8%87%AA%E5%AE%9A%E4%B9%89hook%E5%87%BD%E6%95%B0/</id>
    <published>2023-09-29T03:57:22.000Z</published>
    <updated>2024-04-16T09:24:28.203Z</updated>
    
    <content type="html"><![CDATA[<ul><li>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。 </li><li>类似于vue2.x中的mixin。 </li><li>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。 &lt;/li&gt;
&lt;li&gt;类似于vue2.x中的mixin。 &lt;/li&gt;
&lt;li&gt;自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。&lt;/li&gt;
</summary>
      
    
    
    
    <category term="vue3" scheme="https://geminglu.github.io/blog/categories/vue3/"/>
    
    
    <category term="前端" scheme="https://geminglu.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue3" scheme="https://geminglu.github.io/blog/tags/vue3/"/>
    
    <category term="vue" scheme="https://geminglu.github.io/blog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>globalThis,window,self,frames 直接的区别</title>
    <link href="https://geminglu.github.io/blog/2023/09/29/globalThis,window,self,frames/"/>
    <id>https://geminglu.github.io/blog/2023/09/29/globalThis,window,self,frames/</id>
    <published>2023-09-29T03:51:22.000Z</published>
    <updated>2024-04-16T09:24:28.203Z</updated>
    
    <content type="html"><![CDATA[<p>在以前，从不同的 JavaScript 环境中获取全局对象需要不同的语句。在 Web 中，可以通过 window、self 或者 frames 取到全局对象，但是在 Web Workers 中，只有 self 可以。在 Node.js 中，它们都无法获取，必须使用 global。</p><p>在松散模式下，可以在函数中返回 this 来获取全局对象，但是在严格模式和模块环境下，this 会返回 undefined。 <code>You can also use Function(‘return this’)(), but environments that disable eval(), like CSP in browsers, prevent use of Function in this way.</code></p><p>globalThis 提供了一个标准的方式来获取不同环境下的全局 this 对象（也就是全局对象自身）。不像 window 或者 self 这些属性，它确保可以在有无窗口的各种环境下正常工作。所以，你可以安心的使用 globalThis，不必担心它的运行环境。为便于记忆，你只需要记住，全局作用域中的 this 就是 globalThis</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在以前，从不同的 JavaScript 环境中获取全局对象需要不同的语句。在 Web 中，可以通过 window、self 或者 frames 取到全局对象，但是在 Web Workers 中，只有 self 可以。在 Node.js 中，它们都无法获取，必须使用 glob</summary>
      
    
    
    
    <category term="javascipt" scheme="https://geminglu.github.io/blog/categories/javascipt/"/>
    
    
    <category term="前端" scheme="https://geminglu.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="https://geminglu.github.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>rebase使用技巧</title>
    <link href="https://geminglu.github.io/blog/2023/09/29/git/rebase%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://geminglu.github.io/blog/2023/09/29/git/rebase%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2023-09-29T03:13:58.000Z</published>
    <updated>2024-04-16T09:24:28.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变基时可用的命令"><a href="#变基时可用的命令" class="headerlink" title="变基时可用的命令"></a>变基时可用的命令</h2><p>变基时有六个命令可用：</p><ul><li><code>pick</code></li></ul><p><code>pick</code>只表示包含提交。 在变基进行时重新排列<code>pick</code>命令的顺序会更改提交的顺序。 如果选择不包含提交，应删除整行。</p><ul><li><code>reword</code></li></ul><p><code>reword</code>命令类似于<code>pick</code>，但在使用后，变基过程就会暂停，让你有机会改变提交消息。 提交所做的任何更改都不受影响。</p><ul><li><code>edit</code></li></ul><p>如果选择 <code>edit</code>提交，你将有机会修订提交，也就是说，可以完全添加或更改提交。 您也可以创建更多提交后再继续变基。 这样您可以将大提交拆分为小提交，或者删除在提交中执行错误更改。</p><ul><li><code>squash</code></li></ul><p>此命令可用于将两个或以上的提交合并为一个。 下面的提交压缩到其上面的提交。 Git 让您有机会编写描述两次更改的新提交消息。</p><ul><li><code>fixup</code></li></ul><p>这类似于 squash，但要合并的提交丢弃了其消息。 提交只是合并到其上面的提交，之前提交的消息用于描述两次更改。</p><ul><li><code>exec</code></li></ul><p>这可让您对提交运行任意<code>shell</code>命令。</p><h2 id="更改提交顺序"><a href="#更改提交顺序" class="headerlink" title="更改提交顺序"></a>更改提交顺序</h2><p>pick只是意味着包括提交。重新进行命令时，重新安排pick&#96;命令的顺序会更改提交的顺序。如果选择不包括提交，则应删除整行。<br>我们先看一下当前提交的信息</p><p><img                         lazyload                       alt="image"                       data-src="/blog/images/23412.png.png"                        alt="image.png"                 ></p><p>现在我们要改变一下<code>b</code>和<code>d</code>两次提交的顺序，<code>HRAD~2</code>表示选择离HEAD最近的3次提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p> 接着git会弹出一个文本，<br><img                         lazyload                       alt="image"                       data-src="/blog/images/23412.png"                        alt="image.png"                 ><br>下面就是vim操作了，只要交换第一行和第三行的位置就行，把光标移动到第一行快速按两下d键第一行就被剪切到剪切板中了，再把光标移动到d提交那行按下p就把刚才剪切的内容粘贴过来了，像这样操作把<code>191bc18</code>那次提交移动到第一行就行了，按下<code>shift + :</code>输入<code>wq</code>保存退出。<br>输入<code>git log</code>查看提交信息顺序改变了。<br><img                         lazyload                       alt="image"                       data-src="https://cdn.nlark.com/yuque/0/2022/png/25669443/1662615374405-84daa4f5-ca28-4b4a-8091-063464f665c1.png#averageHue=%23fcfbfa&clientId=ue32db35e-e55b-4&from=paste&height=385&id=u26d7514c&originHeight=577&originWidth=1182&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60888&status=done&style=none&taskId=u30308aca-dade-4034-9245-2de1112f19a&title=&width=788"                        alt="image.png"                 ></p><h2 id="删除提交"><a href="#删除提交" class="headerlink" title="删除提交"></a>删除提交</h2><p>比如我们要删除提交信息为c的那次提交，先看一下当前<br><img                         lazyload                       alt="image"                       data-src="https://cdn.nlark.com/yuque/0/2022/png/25669443/1662684886830-a991a9b4-215c-4c6e-8517-6d9ed7ba73b5.png#averageHue=%23fcfbfa&clientId=u413c4319-4f0d-4&from=paste&height=402&id=u7a18d984&originHeight=603&originWidth=1178&originalType=binary&ratio=1&rotation=0&showTitle=false&size=73746&status=done&style=none&taskId=u20b22ffc-d517-4fb6-b6c0-514882ca6f2&title=&width=785.3333333333334"                        alt="image.png"                 ><br>HEAD~2距离HEAD最近的两次提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p>只要删除提交信息为<code>c</code>的那行就行了。<br><img                         lazyload                       alt="image"                       data-src="https://cdn.nlark.com/yuque/0/2022/png/25669443/1662685133209-c8a15c09-2b28-4af8-b2f2-bb612c682814.png#averageHue=%23f9f8f7&clientId=u413c4319-4f0d-4&from=paste&height=444&id=udce63aa5&originHeight=666&originWidth=1180&originalType=binary&ratio=1&rotation=0&showTitle=false&size=92591&status=done&style=none&taskId=udd42b336-a165-42fe-8815-ec7b56d62fd&title=&width=786.6666666666666"                        alt="image.png"                 ><br>保存后输入<code>git log</code>查看结果<br><img                         lazyload                       alt="image"                       data-src="https://cdn.nlark.com/yuque/0/2022/png/25669443/1662685207320-04347028-0f62-4d2d-ba92-20e9e2fac0ac.png#averageHue=%23fbfbfa&clientId=u413c4319-4f0d-4&from=paste&height=305&id=u299d85bc&originHeight=457&originWidth=1180&originalType=binary&ratio=1&rotation=0&showTitle=false&size=53721&status=done&style=none&taskId=u3223d659-0951-474e-9079-723e4ca5c5d&title=&width=786.6666666666666"                        alt="image.png"                 ></p><h2 id="record-修改提交消息-提交内容不变"><a href="#record-修改提交消息-提交内容不变" class="headerlink" title="record 修改提交消息(提交内容不变)"></a>record 修改提交消息(提交内容不变)</h2><p>如果我们要修改<code>b</code>的那次提交的commit信息，可以使用<code>record</code>来修改commit信息，输入<code>git log</code>先看一下现在的commit是什么。<br><img                         lazyload                       alt="image"                       data-src="https://cdn.nlark.com/yuque/0/2022/png/25669443/1662685614666-0757006d-8642-4d75-8fa3-a2c3de76ecff.png#averageHue=%23fbfbfa&clientId=u413c4319-4f0d-4&from=paste&height=307&id=u921f8f5e&originHeight=460&originWidth=1176&originalType=binary&ratio=1&rotation=0&showTitle=false&size=53729&status=done&style=none&taskId=u5dffea41-0771-4d5a-84d0-ed003aa2aff&title=&width=784"                        alt="image.png"                 ><br><code>c37146f7</code>可以快速定位到<code>c37146f7</code> 后面提交的地方，但是列出的不包括指定的提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i c37146f7</span><br></pre></td></tr></table></figure><p>将<code>pack</code>定改为<code>r</code>,<code>r</code>是 record简写。<br><img                         lazyload                       alt="image"                       data-src="https://cdn.nlark.com/yuque/0/2022/png/25669443/1662688703343-ee80b1a2-4eeb-4c9d-97ca-39732c10b4d0.png#averageHue=%23f8f8f7&clientId=u413c4319-4f0d-4&from=paste&height=443&id=u709935db&originHeight=664&originWidth=1173&originalType=binary&ratio=1&rotation=0&showTitle=false&size=91899&status=done&style=none&taskId=u753ffffb-15f1-42b3-b89f-715fa92cdf0&title=&width=782"                        alt="image.png"                 ><br>接着<code>Esc</code>,<code>shift + ;``wq</code> 保存退出，git会弹出一个文本编辑器在第一行修改文本描述。<br><img                         lazyload                       alt="image"                       data-src="https://cdn.nlark.com/yuque/0/2022/png/25669443/1662688993829-505f2126-b3da-4ad0-99a9-9516315fc4bc.png#averageHue=%23f6f5f5&clientId=u413c4319-4f0d-4&from=paste&height=303&id=u71a302b7&originHeight=455&originWidth=1183&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54788&status=done&style=none&taskId=u6ffecc3e-6a61-401e-be13-d76aa7c1633&title=&width=788.6666666666666"                        alt="image.png"                 ><br>修改完成后保存退出，输入<code>git log</code>查看commit信息。<br><img                         lazyload                       alt="image"                       data-src="https://cdn.nlark.com/yuque/0/2022/png/25669443/1662689153814-1b11f5f5-39dd-4f76-9c0d-df966477d668.png#averageHue=%23fbfbfa&clientId=u413c4319-4f0d-4&from=paste&height=313&id=u0dac04b7&originHeight=470&originWidth=1175&originalType=binary&ratio=1&rotation=0&showTitle=false&size=55716&status=done&style=none&taskId=u4b12125e-071a-45f0-8698-7e785bfa51b&title=&width=783.3333333333334"                        alt="image.png"                 ></p><h2 id="edit修改提交"><a href="#edit修改提交" class="headerlink" title="edit修改提交"></a>edit修改提交</h2><p>使用<code>edit</code>可以完全添加或更改提交。您还可以进行更多提交，然后再继续进行变基。这使您可以将大型提交拆分为较小的提交，或者删除在提交中所做的错误更改。<br>如果在<code>3d06118c</code>和<code>f18b62266</code>之间在添加一个提交要怎么做呢，<br>显示到<code>HEAD</code>最近到两次提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pick c37146f d</span><br><span class="line">pick 3d06118 修改commit b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Rebase f18b622..3d06118 onto f18b622 (2 commands)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Commands:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">p, pick &lt;commit&gt; = use commit</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e, edit &lt;commit&gt; = use commit, but stop <span class="keyword">for</span> amending</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">s, squash &lt;commit&gt; = use commit, but meld into previous commit<span class="comment"># f, fixup &lt;commit&gt; = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">x, <span class="built_in">exec</span> &lt;<span class="built_in">command</span>&gt; = run <span class="built_in">command</span> (the rest of the line) using shell</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">b, <span class="built_in">break</span> = stop here (<span class="built_in">continue</span> rebase later with <span class="string">&#x27;git rebase --continue&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">d, drop &lt;commit&gt; = remove commit</span></span><br></pre></td></tr></table></figure><p>将<code>c37146f</code>前面的<code>pick</code>修改为<code>e</code>，保存并退后后git会输出一下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stopped at c37146f...  d</span><br><span class="line">You can amend the commit now, with</span><br><span class="line"></span><br><span class="line">  git commit --amend</span><br><span class="line"></span><br><span class="line">Once you are satisfied with your changes, run</span><br><span class="line"></span><br><span class="line">  git rebase --continue</span><br></pre></td></tr></table></figure><p>此时可以看到<code>master</code>变成了<code>(master|REBASE 1/2)</code>。<br>新建一个<code>c.txt</code>文件并提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add c.txt</span><br><span class="line">git commit -m &quot;c&quot;</span><br><span class="line">[detached HEAD c66dc69] c</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 c.txt</span><br></pre></td></tr></table></figure><p>接着继续rebase</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase --continue</span><br><span class="line">Successfully rebased and updated refs/heads/master.</span><br></pre></td></tr></table></figure><p>再次查看一下提交记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line"></span><br><span class="line">commit 2fc98daaf7552d7dbc8e9c078ad205026344674f (HEAD -&gt; master)</span><br><span class="line">Author: you &lt;youemail@outlook.com&gt;</span><br><span class="line">Date:   Thu Sep 8 13:13:35 2022 +0800</span><br><span class="line"></span><br><span class="line">    修改commit b</span><br><span class="line"></span><br><span class="line">commit c66dc69744c255f4827da269e92d8228f8ebd737</span><br><span class="line">Author: you &lt;youemail@outlook.com&gt;</span><br><span class="line">Date:   Fri Sep 9 10:26:37 2022 +0800</span><br><span class="line"></span><br><span class="line">    c</span><br><span class="line"></span><br><span class="line">commit c37146f70d8cc1632f818d2ea013a34550a1c792</span><br><span class="line">Author: you &lt;youemail@outlook.com&gt;</span><br><span class="line">Date:   Thu Sep 8 13:13:43 2022 +0800</span><br><span class="line"></span><br><span class="line">    d</span><br><span class="line"></span><br><span class="line">commit f18b62266b664cd3228bd332f81a32dcd6a1ad1f</span><br><span class="line">Author: you &lt;youemail@outlook.com&gt;</span><br><span class="line">Date:   Thu Sep 8 13:13:30 2022 +0800</span><br><span class="line"></span><br><span class="line">    a</span><br></pre></td></tr></table></figure><p>如果我们只想修改提交的内容，不添加commit要怎么办<br>参考上面的步骤在提交时加一个参数<code>git commit --amend</code>这样就不会多一个commit了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add c.txt</span><br><span class="line">git commit --amend</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">Successfully rebased and updated refs/heads/master.</span></span><br></pre></td></tr></table></figure><h2 id="squash合并提交"><a href="#squash合并提交" class="headerlink" title="squash合并提交"></a>squash合并提交</h2><p><code>squash</code>可以将两个或多个<code>commit</code>合并到一个commit中，被合并的commit会压缩到上一次的commit中，还可以更改这两个<code>commit</code>合并后新的<code>commit</code>信息。<br>如果我们要合并<code>e78c223</code>和<code>3437126</code>要怎么做呢，先看一下当前的提交信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Author: you &lt;youemail@outlook.com&gt;</span><br><span class="line">Date:   Thu Sep 8 13:13:35 2022 +0800</span><br><span class="line"></span><br><span class="line">    修改commit b</span><br><span class="line"></span><br><span class="line">commit 34371265e7df46cd5b877339ad4d1b3a4d8a315e</span><br><span class="line">Author: you &lt;youemail@outlook.com&gt;</span><br><span class="line">Date:   Fri Sep 9 10:26:37 2022 +0800</span><br><span class="line"></span><br><span class="line">    c</span><br><span class="line"></span><br><span class="line">commit c37146f70d8cc1632f818d2ea013a34550a1c792</span><br><span class="line">Author: you &lt;youemail@outlook.com&gt;</span><br><span class="line">Date:   Thu Sep 8 13:13:43 2022 +0800</span><br><span class="line"></span><br><span class="line">    d</span><br><span class="line"></span><br><span class="line">commit f18b62266b664cd3228bd332f81a32dcd6a1ad1f</span><br><span class="line">Author: you &lt;youemail@outlook.com&gt;</span><br><span class="line">Date:   Thu Sep 8 13:13:30 2022 +0800</span><br><span class="line"></span><br><span class="line">    a</span><br><span class="line">(END)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git rebase - i HEAD~2</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">pick 3437126 c</span></span><br><span class="line">pick e78c223 修改commit b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Rebase c37146f..e78c223 onto c37146f (2 commands)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Commands:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">p, pick &lt;commit&gt; = use commit</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>因为需要将<code>e78c223</code>合并到他的上次提交，需要把<code>e78c223</code>前面的<code>pick</code>改为<code>s</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git rebase - i HEAD~2</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">pick 3437126 c</span></span><br><span class="line">s e78c223 修改commit b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Rebase c37146f..e78c223 onto c37146f (2 commands)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Commands:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">p, pick &lt;commit&gt; = use commit</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>保存并退出，git会弹出新的文本框</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This is a combination of 2 commits.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This is the 1st commit message:</span></span><br><span class="line"></span><br><span class="line">c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This is the commit message <span class="comment">#2:</span></span></span><br><span class="line"></span><br><span class="line">修改commit b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please enter the commit message <span class="keyword">for</span> your changes. Lines starting</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">with <span class="string">&#x27;#&#x27;</span> will be ignored, and an empty message aborts the commit.</span></span><br></pre></td></tr></table></figure><p>修改commit信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This is a combination of 2 commits.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This is the 1st commit message:</span></span><br><span class="line"></span><br><span class="line">新的commit c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This is the commit message <span class="comment">#2:</span></span></span><br><span class="line"></span><br><span class="line">新的commit 修改commit b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please enter the commit message <span class="keyword">for</span> your changes. Lines starting</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">with <span class="string">&#x27;#&#x27;</span> will be ignored, and an empty message aborts the commit.</span></span><br></pre></td></tr></table></figure><p>保存并退出，变基完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">commit 88a2a47912f3fe643d486739b000dfae776ed493 (HEAD -&gt; master)</span></span><br><span class="line">Author: you &lt;youeamil@outlook.com&gt;</span><br><span class="line">Date:   Fri Sep 9 10:26:37 2022 +0800</span><br><span class="line"></span><br><span class="line">    新的commit c</span><br><span class="line"></span><br><span class="line">    新的commit 修改commit b</span><br><span class="line"></span><br><span class="line">commit c37146f70d8cc1632f818d2ea013a34550a1c792</span><br><span class="line">Author: you &lt;youeamil@outlook.com&gt;</span><br><span class="line">Date:   Thu Sep 8 13:13:43 2022 +0800</span><br><span class="line"></span><br><span class="line">    d</span><br><span class="line"></span><br><span class="line">commit f18b62266b664cd3228bd332f81a32dcd6a1ad1f</span><br><span class="line">Author: you &lt;youeamil@outlook.com&gt;</span><br><span class="line">Date:   Thu Sep 8 13:13:30 2022 +0800</span><br><span class="line"></span><br><span class="line">    a</span><br></pre></td></tr></table></figure><p>常看commit修改 <code>git show 88a2a47</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">git show 88a2a47</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">commit 88a2a47912f3fe643d486739b000dfae776ed493 (HEAD -&gt; master)</span></span><br><span class="line">Author: you &lt;youemail@outlook.com&gt;</span><br><span class="line">Date:   Fri Sep 9 10:26:37 2022 +0800</span><br><span class="line"></span><br><span class="line">    新的commit c</span><br><span class="line"></span><br><span class="line">    新的commit 修改commit b</span><br><span class="line"></span><br><span class="line">diff --git a/b.txt b/b.txt</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..63d8dbd</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/b.txt</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+b</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/c.txt b/c.txt</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..d36cf97</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/c.txt</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+ccccc</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><h2 id="fixup合并提交，只保留较早的提交信息"><a href="#fixup合并提交，只保留较早的提交信息" class="headerlink" title="fixup合并提交，只保留较早的提交信息"></a>fixup合并提交，只保留较早的提交信息</h2><p>使用<code>fixup</code>会把相邻的commit合并到上一次的commit中，会保留上次的commit信息，<code>fixup</code>不可以编辑commit信息<br>查看距离<code>HEAD</code>最近的两次提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~2</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">pick c37146f d</span></span><br><span class="line">pick 88a2a47 新的commit c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Rebase f18b622..88a2a47 onto f18b622 (2 commands)</span></span><br></pre></td></tr></table></figure><p>将<code>88a2a47</code>前面<code>pick</code>改为<code>f</code>，<code>88a2a47</code>修改的内容就会合到<code>c37146f</code>上面.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pick c37146f d</span><br><span class="line">f 88a2a47 新的commit c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Rebase f18b622..88a2a47 onto f18b622 (2 commands)</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">commit c6dcdbc2c174b6480aa6d76ca3cfa3ec5b6a7ea5 (HEAD -&gt; master)</span></span><br><span class="line">Author: you &lt;youeamil@outlook.com&gt;</span><br><span class="line">Date:   Thu Sep 8 13:13:43 2022 +0800</span><br><span class="line"></span><br><span class="line">    d</span><br><span class="line"></span><br><span class="line">commit f18b62266b664cd3228bd332f81a32dcd6a1ad1f</span><br><span class="line">Author: you &lt;youeamil@outlook.com&gt;</span><br><span class="line">Date:   Thu Sep 8 13:13:30 2022 +0800</span><br><span class="line"></span><br><span class="line">    a</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;变基时可用的命令&quot;&gt;&lt;a href=&quot;#变基时可用的命令&quot; class=&quot;headerlink&quot; title=&quot;变基时可用的命令&quot;&gt;&lt;/a&gt;变基时可用的命令&lt;/h2&gt;&lt;p&gt;变基时有六个命令可用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pick&lt;/code&gt;&lt;/li</summary>
      
    
    
    
    <category term="git" scheme="https://geminglu.github.io/blog/categories/git/"/>
    
    
    <category term="Git" scheme="https://geminglu.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>commit 规范</title>
    <link href="https://geminglu.github.io/blog/2023/09/29/git/commit/"/>
    <id>https://geminglu.github.io/blog/2023/09/29/git/commit/</id>
    <published>2023-09-29T03:12:24.000Z</published>
    <updated>2024-04-16T09:24:28.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是约定式提交"><a href="#什么是约定式提交" class="headerlink" title="什么是约定式提交"></a>什么是约定式提交</h2><p>约定式提交（Conventional Commits）是一种用于代码版本控制的规范，旨在通过明确和标准化提交信息来提高代码协作质量和效率。其基本原则是通过规定提交信息的结构和语义来提高代码版本控制的可读性、可维护性和自动化程度。<br>约定式提交规范通常要求提交信息包括一个描述性的”类型”、一个可选的”作用域”、一个用于简洁说明的”主题”，以及可选的”正文”和”尾部”等组成部分。这些组成部分的格式和语义都是根据规范要求进行约定的，比如使用”feat”来表示新功能、”fix”表示修复错误、”docs”表示文档变更等。<br>通过遵循约定式提交规范，开发人员可以更容易地理解和管理代码的变更历史，同时也为自动化工具提供了更多可靠的信息，例如自动生成版本号、发布日志和代码库更新等操作。<br>提交说明的结构如下所示:<br>原文：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;[optional scope]: &lt;description&gt;</span><br><span class="line">[optional body]</span><br><span class="line">[optional footer(s)]</span><br></pre></td></tr></table></figure><p>译文：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt;[可选 范围]: &lt;描述&gt;</span><br><span class="line">[可选 正文]</span><br><span class="line">[可选 脚注]</span><br></pre></td></tr></table></figure><p>提交说明包含了下面的结构化元素，以向类库使用者表明其意图：</p><ol><li>fix: 类型 为 fix 的提交表示在代码库中修复了一个 bug（这和语义化版本中的 <code>PATCH</code>[1] 相对应）。</li><li>feat: 类型 为 feat 的提交表示在代码库中新增了一个功能（这和语义化版本中的 <code>MINOR</code>[2] 相对应）。</li><li>BREAKING CHANGE: 在脚注中包含 BREAKING CHANGE: 或 &lt;类型&gt;(范围) 后面有一个 ! 的提交，表示引入了破坏性 API 变更（这和语义化版本中的 <code>MAJOR</code>[3] 相对应）。破坏性变更可以是任意 类型 提交的一部分。</li><li>除 fix: 和 feat: 之外，也可以使用其它提交 类型 ，例如 @commitlint&#x2F;config-conventional[4]（基于 Angular 约定[5]）中推荐的 build:、chore:、 ci:、docs:、style:、refactor:、perf:、test:，等等。</li><li>脚注中除了 BREAKING CHANGE: <description> ，其它条目应该采用类似 git trailer format[6] 这样的惯例。</li></ol><p>其它提交类型在约定式提交规范中并没有强制限制，并且在语义化版本中没有隐式影响（除非它们包含 BREAKING CHANGE）。可以为提交类型添加一个围在圆括号内的范围，以为其提供额外的上下文信息。例如 feat(parser): adds ability to parse arrays.。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>包含了描述并且脚注中有破坏性变更的提交说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">feat: allow provided config object to extend other configs</span><br><span class="line">BREAKING CHANGE: `extends` key in config file is now used for extending other config files</span><br></pre></td></tr></table></figure><p>包含了 ! 字符以提醒注意破坏性变更的提交说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feat!: send an email to the customer when a product is shipped</span><br></pre></td></tr></table></figure><p>包含了范围和破坏性变更 ! 的提交说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feat(api)!: send an email to the customer when a product is shipped</span><br></pre></td></tr></table></figure><p>包含了 ! 和 BREAKING CHANGE 脚注的提交说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chore!: drop support for Node 6</span><br><span class="line">BREAKING CHANGE: use JavaScript features not available in Node 6.</span><br></pre></td></tr></table></figure><p>不包含正文的提交说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docs: correct spelling of CHANGELOG</span><br></pre></td></tr></table></figure><p>包含范围的提交说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feat(lang): add polish language</span><br></pre></td></tr></table></figure><p>包含多行正文和多行脚注的提交说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fix: prevent racing of requests</span><br><span class="line">Introduce a request id and a reference to latest request. Dismissincoming responses other than from latest request.</span><br><span class="line">Remove timeouts which were used to mitigate the racing issue but areobsolete now.</span><br><span class="line">Reviewed-by: ZRefs: #123</span><br></pre></td></tr></table></figure><h3 id="type-类型概览"><a href="#type-类型概览" class="headerlink" title="type 类型概览"></a>type 类型概览</h3><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>feat</td><td>新增一个功能</td></tr><tr><td>fix</td><td>修复一个Bug</td></tr><tr><td>docs</td><td>文档变更</td></tr><tr><td>style</td><td>代码格式（不影响功能，例如空格、分号等格式修正）</td></tr><tr><td>refactor</td><td>代码重构</td></tr><tr><td>perf</td><td>改善性能</td></tr><tr><td>test</td><td>测试</td></tr><tr><td>build</td><td>变更项目构建或外部依赖（例如scopes: webpack、gulp、npm等）</td></tr><tr><td>ci</td><td>更改持续集成软件的配置文件和package中的scripts命令，例如scopes: Travis, Circle等</td></tr><tr><td>chore</td><td>变更构建流程或辅助工具</td></tr><tr><td>revert</td><td>代码回退</td></tr></tbody></table><h2 id="为什么需要约定式提交？"><a href="#为什么需要约定式提交？" class="headerlink" title="为什么需要约定式提交？"></a>为什么需要约定式提交？</h2><p>Git提交信息需要遵循Angular约定是为了使提交信息格式清晰、易于阅读和理解，从而提高代码协作的效率。Angular约定包括以下三个部分：</p><ol><li>标题（header）：用一行简短的描述来总结更改内容，并使用特殊关键字指定更改类型和影响范围。</li><li>正文（body）：提供更详细的更改描述，包括更改原因、影响和解决方案等信息。</li><li>页脚（footer）：提供一些附加信息，如相关链接、关联的BUG编号等。</li></ol><p>通过遵循Angular约定，可以使提交信息更加规范化和易于管理，从而方便其他团队成员阅读和理解更改的含义，从而提高团队协作效率。此外，遵循Angular约定的提交信息还可以更好地与许多自动化工具进行集成，如自动化版本控制、代码审查工具等。</p><h2 id="如何遵守约定式提交？"><a href="#如何遵守约定式提交？" class="headerlink" title="如何遵守约定式提交？"></a>如何遵守约定式提交？</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是约定式提交&quot;&gt;&lt;a href=&quot;#什么是约定式提交&quot; class=&quot;headerlink&quot; title=&quot;什么是约定式提交&quot;&gt;&lt;/a&gt;什么是约定式提交&lt;/h2&gt;&lt;p&gt;约定式提交（Conventional Commits）是一种用于代码版本控制的规范，旨在通过</summary>
      
    
    
    
    <category term="git" scheme="https://geminglu.github.io/blog/categories/git/"/>
    
    
    <category term="Git" scheme="https://geminglu.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>axios封装</title>
    <link href="https://geminglu.github.io/blog/2023/09/29/axios%E5%B0%81%E8%A3%85/"/>
    <id>https://geminglu.github.io/blog/2023/09/29/axios%E5%B0%81%E8%A3%85/</id>
    <published>2023-09-29T03:07:38.000Z</published>
    <updated>2024-04-16T09:24:28.199Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Toast</span> <span class="keyword">from</span> <span class="string">&quot;zarm/lib/toast&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;zarm/lib/toast/style/css&quot;</span></span><br><span class="line"><span class="keyword">let</span> appId = <span class="string">&quot;sdjhb-jdhoo-f265-djbhfj-iui&quot;</span>   <span class="comment">//应用识别码，会在每一个url地址上拼接这个属性</span></span><br><span class="line"><span class="keyword">let</span> stayTime = <span class="number">3000</span> <span class="comment">//设置zarmUI库Toast（轻提示）组件的停留时间</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置超时时间和跨域是否允许携带凭证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span>; <span class="comment">//10秒</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置post请求头</span></span><br><span class="line"><span class="comment"> * application/json;charset=UTF-8   JSON格式</span></span><br><span class="line"><span class="comment"> * application/x-www-form-urlencoded;charset=UTF-8  Form表单格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">let</span> sources = []  <span class="comment">// 定义数组用于存储每个ajax请求的取消函数及对应标识</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求防抖当一个url地址被请求多次就会取消前一次请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">removeSource</span> = (<span class="params">config</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> source <span class="keyword">in</span> sources) &#123;</span><br><span class="line">        <span class="comment">// 当多次请求相同时，取消之前的请求</span></span><br><span class="line">        <span class="keyword">if</span> (sources[source].<span class="property">umet</span> === config.<span class="property">url</span> + <span class="string">&#x27;&amp;&#x27;</span> + config.<span class="property">method</span>) &#123;</span><br><span class="line">            sources[source].<span class="title function_">cancel</span>(<span class="string">&quot;取消请求&quot;</span>)</span><br><span class="line">            sources.<span class="title function_">splice</span>(source, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">removeSource</span>(config)</span><br><span class="line">    config.<span class="property">cancelToken</span> = <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 将取消函数存起来</span></span><br><span class="line">        sources.<span class="title function_">push</span>(&#123; <span class="attr">umet</span>: config.<span class="property">url</span> + <span class="string">&#x27;&amp;&#x27;</span> + config.<span class="property">method</span>, <span class="attr">cancel</span>: c &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">data</span>.<span class="property">statusCode</span> &gt;= <span class="number">3000</span>) &#123;</span><br><span class="line">        <span class="title class_">Toast</span>.<span class="title function_">show</span>(&#123; <span class="attr">content</span>: config.<span class="property">data</span>.<span class="property">msg</span>, stayTime &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">removeSource</span>(config.<span class="property">config</span>)</span><br><span class="line">    <span class="keyword">return</span> config.<span class="property">data</span>;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!error.<span class="property">response</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">switch</span> (error.<span class="property">response</span>.<span class="property">status</span>) &#123;</span><br><span class="line">        <span class="comment">// 401: 未登录</span></span><br><span class="line">        <span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径</span></span><br><span class="line">        <span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。                </span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> === <span class="string">&quot;localhost&quot;</span>) &#123;</span><br><span class="line">                axios.<span class="title function_">post</span>(<span class="string">&quot;/api/v1/login?client_name=form&quot;</span>, &#123;</span><br><span class="line">                    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;lixiaoyao4_vendor&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;password&quot;</span>: <span class="number">123456</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">window</span>.<span class="property">location</span> = error.<span class="property">response</span>.<span class="property">headers</span>.<span class="property">locationurl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 403 token过期</span></span><br><span class="line">        <span class="comment">// 登录过期对用户进行提示</span></span><br><span class="line">        <span class="comment">// 清除本地token和清空vuex中token对象</span></span><br><span class="line">        <span class="comment">// 跳转登录页面                </span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">            <span class="title class_">Toast</span>.<span class="title function_">show</span>(&#123; <span class="attr">content</span>: <span class="string">&quot;登录过期，请重新登录&quot;</span>, stayTime &#125;)</span><br><span class="line">            <span class="comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面 </span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> === <span class="string">&quot;localhost&quot;</span>) &#123;</span><br><span class="line">                axios.<span class="title function_">post</span>(<span class="string">&quot;/api/v1/login?client_name=form&quot;</span>, &#123;</span><br><span class="line">                    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;lixiaoyao4_vendor&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;password&quot;</span>: <span class="number">123456</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">window</span>.<span class="property">location</span> = error.<span class="property">response</span>.<span class="property">headers</span>.<span class="property">locationurl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 404请求不存在</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            <span class="title class_">Toast</span>.<span class="title function_">show</span>(&#123; <span class="attr">content</span>: <span class="string">&quot;访问资源不存在&quot;</span>, stayTime &#125;)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 其他错误，直接抛出错误提示</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="title class_">Toast</span>.<span class="title function_">show</span>(&#123; <span class="attr">content</span>: error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>, stayTime &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error.<span class="property">response</span>)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get方法，对应get请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url, params</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        axios.<span class="title function_">get</span>(url, &#123;</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                ...params,</span><br><span class="line">                appId</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err.<span class="property">data</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * post方法，对应post请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">url, params</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&quot;?&quot;</span>) === -<span class="number">1</span>) &#123;</span><br><span class="line">        url += <span class="string">`?appId=<span class="subst">$&#123;appId&#125;</span>`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url += <span class="string">`&amp;appId=<span class="subst">$&#123;appId&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        axios.<span class="title function_">post</span>(<span class="string">`<span class="subst">$&#123;url&#125;</span>`</span>, params)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res);</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对外暴露</span></span><br><span class="line"><span class="keyword">export</span> &#123; post, get &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Toast</span> <span class="keyword">from</span> <span class="string">&quot;zarm/lib/toast&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;zarm/lib/toast/style/css&quot;</span></span><br><span class="line"><span class="comment">// var appId = &quot;ww39bb02654ddd65fd&quot;</span></span><br><span class="line"><span class="keyword">var</span> appId = <span class="string">&quot;sdjhb-jdhoo-f265-djbhfj-iui&quot;</span></span><br><span class="line"><span class="keyword">var</span> stayTime = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> codeMessage = &#123;</span><br><span class="line">    <span class="number">400</span>: <span class="string">&quot;请求参数错误&quot;</span>,</span><br><span class="line">    <span class="number">401</span>: <span class="string">&quot;权限不足, 请重新登录&quot;</span>,</span><br><span class="line">    <span class="number">403</span>: <span class="string">&quot;服务器拒绝本次访问&quot;</span>,</span><br><span class="line">    <span class="number">404</span>: <span class="string">&quot;请求资源未找到&quot;</span>,</span><br><span class="line">    <span class="number">500</span>: <span class="string">&quot;内部服务器错误&quot;</span>,</span><br><span class="line">    <span class="number">501</span>: <span class="string">&quot;服务器不支持该请求中使用的方法&quot;</span>,</span><br><span class="line">    <span class="number">502</span>: <span class="string">&quot;网关错误&quot;</span>,</span><br><span class="line">    <span class="number">504</span>: <span class="string">&quot;网关超时&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置超时时间和跨域是否允许携带凭证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// axios.defaults.timeout = 10000; //10秒</span></span><br><span class="line"><span class="comment">// axios.defaults.withCredentials = true;</span></span><br><span class="line"><span class="comment">// 设置post请求头</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">let</span> sources = []  <span class="comment">// 定义数组用于存储每个ajax请求的取消函数及对应标识</span></span><br><span class="line"><span class="comment">// 定义取消操作</span></span><br><span class="line"><span class="comment">/*let removeSource = (config) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    for (let source in sources) &#123;</span></span><br><span class="line"><span class="comment">        // 当多次请求相同时，取消之前的请求</span></span><br><span class="line"><span class="comment">        if (sources[source].umet === config.url + &#x27;&amp;&#x27; + config.method) &#123;</span></span><br><span class="line"><span class="comment">            sources[source].cancel(&quot;取消请求&quot;)</span></span><br><span class="line"><span class="comment">            sources.splice(source, 1)</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*axios.interceptors.request.use(config =&gt; &#123;</span></span><br><span class="line"><span class="comment">        removeSource(config)</span></span><br><span class="line"><span class="comment">        config.cancelToken = new CancelToken((c) =&gt; &#123;</span></span><br><span class="line"><span class="comment">            // 将取消函数存起来</span></span><br><span class="line"><span class="comment">            sources.push(&#123;umet: config.url + &#x27;&amp;&#x27; + config.method, cancel: c&#125;)</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">        return config;</span></span><br><span class="line"><span class="comment">    &#125;, error =&gt; &#123;</span></span><br><span class="line"><span class="comment">        return Promise.reject(error)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">)*/</span></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">data</span>.<span class="property">statusCode</span> &gt;= <span class="number">3000</span>) &#123;</span><br><span class="line">        <span class="title class_">Toast</span>.<span class="title function_">show</span>(&#123; <span class="attr">content</span>: config.<span class="property">data</span>.<span class="property">msg</span>, stayTime, &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// localStorage.setItem(&#x27;isLogin&#x27;,false);</span></span><br><span class="line">    <span class="comment">// 请求结束后将对应存储的取消函数删除</span></span><br><span class="line">    <span class="comment">//removeSource(config.config)</span></span><br><span class="line">    <span class="keyword">return</span> config.<span class="property">data</span>;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!error.<span class="property">response</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">401</span> === error.<span class="property">response</span>.<span class="property">status</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> === <span class="string">&quot;localhost&quot;</span> || <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> === <span class="string">&quot;10.151.107.6&quot;</span>) &#123;</span><br><span class="line">            axios.<span class="title function_">post</span>(<span class="string">&quot;/api/v1/login?client_name=form&quot;</span>, &#123;</span><br><span class="line">                <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;lixiaoyao4_vendor&quot;</span>,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: <span class="number">123456</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span> = error.<span class="property">response</span>.<span class="property">headers</span>.<span class="property">locationurl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error.<span class="property">response</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Toast</span>.<span class="title function_">show</span>(&#123; <span class="attr">content</span>: error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>, stayTime, &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">data</span>.<span class="property">statusCode</span> &gt;= <span class="number">3000</span>) &#123;</span><br><span class="line">        <span class="title class_">Toast</span>.<span class="title function_">show</span>(&#123; <span class="attr">content</span>: config.<span class="property">data</span>.<span class="property">msg</span>, stayTime, &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// localStorage.setItem(&#x27;isLogin&#x27;,false);</span></span><br><span class="line">    <span class="comment">// 请求结束后将对应存储的取消函数删除</span></span><br><span class="line">    <span class="comment">//removeSource(config.config)</span></span><br><span class="line">    <span class="keyword">return</span> config.<span class="property">data</span>;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!error.<span class="property">response</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">401</span> === error.<span class="property">response</span>.<span class="property">status</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> === <span class="string">&quot;localhost&quot;</span> || <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> === <span class="string">&quot;10.151.107.6&quot;</span>) &#123;</span><br><span class="line">            axios.<span class="title function_">post</span>(<span class="string">&quot;/api/v1/login?client_name=form&quot;</span>, &#123;</span><br><span class="line">                <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;lixiaoyao4_vendor&quot;</span>,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: <span class="number">123456</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span> = error.<span class="property">response</span>.<span class="property">headers</span>.<span class="property">locationurl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error.<span class="property">response</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">errorHandler</span>(error)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 异常处理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">errorHandler</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (codeMessage[error.<span class="property">response</span>.<span class="property">status</span>]) &#123;</span><br><span class="line">        <span class="title class_">Toast</span>.<span class="title function_">show</span>(&#123; <span class="attr">content</span>: error.<span class="property">response</span>.<span class="property">status</span> + <span class="string">&quot;：&quot;</span> + codeMessage[error.<span class="property">response</span>.<span class="property">status</span>], stayTime, &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Toast</span>.<span class="title function_">show</span>(&#123; <span class="attr">content</span>: error.<span class="property">response</span>.<span class="property">status</span> + <span class="string">&quot;：&quot;</span> + error.<span class="property">response</span>.<span class="property">statusText</span>, stayTime, &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get方法，对应get请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url, params</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        axios.<span class="title function_">get</span>(url, &#123;</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                ...params,</span><br><span class="line">                appId</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//CancelToken:source1.token</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err.<span class="property">data</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * post方法，对应post请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">url, params</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&quot;?&quot;</span>) === -<span class="number">1</span>) &#123;</span><br><span class="line">        url += <span class="string">`?appId=<span class="subst">$&#123;appId&#125;</span>`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url += <span class="string">`&amp;appId=<span class="subst">$&#123;appId&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        axios.<span class="title function_">post</span>(<span class="string">`<span class="subst">$&#123;url&#125;</span>`</span>, params)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res);</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对外暴露</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    post,</span><br><span class="line">    get</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="javascipt" scheme="https://geminglu.github.io/blog/categories/javascipt/"/>
    
    
    <category term="js库" scheme="https://geminglu.github.io/blog/tags/js%E5%BA%93/"/>
    
    <category term="前端" scheme="https://geminglu.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>什么是Git</title>
    <link href="https://geminglu.github.io/blog/2023/09/29/git/git/"/>
    <id>https://geminglu.github.io/blog/2023/09/29/git/git/</id>
    <published>2023-09-29T03:07:38.000Z</published>
    <updated>2024-04-16T09:24:28.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SVN与Git的最主要的区别"><a href="#SVN与Git的最主要的区别" class="headerlink" title="SVN与Git的最主要的区别?"></a>SVN与Git的最主要的区别?</h2><p>SVN的存储需要依赖一个服务器，而git所有的东西是放在线上的。节约成本，省时省力。<br>git 是分布式的，svn 是集中式。<br>git 按照源数据的方式存储内容，svn 是按照文件的形式存储<br>git 和 svn 中的分支不同。<br>git 没有全局版本号，svn 有。<br>git 内容的完整性优于 svn。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><table><thead><tr><th>查看配置列表</th><th>git config –list</th></tr></thead><tbody><tr><td>设置用户名</td><td>git config –global user.name “gml”</td></tr><tr><td>设置邮箱</td><td>git config –global user.email “<a class="link"   href="mailto:&#49;&#56;&#x34;&#x35;&#x31;&#x34;&#x38;&#x37;&#x36;&#x37;&#50;&#64;&#113;&#x71;&#x2e;&#99;&#x6f;&#x6d;" >&#49;&#56;&#x34;&#x35;&#x31;&#x34;&#x38;&#x37;&#x36;&#x37;&#50;&#64;&#113;&#x71;&#x2e;&#99;&#x6f;&#x6d;<i class="fas fa-external-link-alt"></i></a>“</td></tr><tr><td>创建项目</td><td>git init</td></tr><tr><td>将文件上传到git暂存区</td><td>git add index.html</td></tr><tr><td>上传所有文件到暂存取</td><td>git add .；git add –all；git add -A</td></tr><tr><td>把暂存区提交到版本仓库中(历史版本)</td><td>git commit -m “引号里写描述信息”</td></tr><tr><td>查看当前状态</td><td>git status</td></tr><tr><td>查看历史区的所有版本</td><td>git log</td></tr><tr><td>回退历史版本</td><td>git reset –hard id</td></tr><tr><td>与远程仓库建立连接</td><td>git remote add origin <a class="link"   href="https://github.com/geminglu/gml_Electricity-project.git" >https://github.com/geminglu/gml_Electricity-project.git<i class="fas fa-external-link-alt"></i></a></td></tr><tr><td>删除远程连接mo</td><td>git remote rm origin</td></tr><tr><td>默认提交到master分区</td><td>git push -u origin master</td></tr><tr><td>克隆远程仓库，第一次拉去要克隆</td><td>git clone 克隆的地址</td></tr><tr><td>把最新的代码从这个远程信息位置拉取回来，第二次直接git pull就可以</td><td>git pull</td></tr><tr><td>删除原创分支“new”</td><td>git push origin -d new</td></tr></tbody></table><h2 id="git的分支"><a href="#git的分支" class="headerlink" title="git的分支"></a>git的分支</h2><p>对于我的地理功能单独开辟一个分支进行操作<br>当你的文件被git管理以后，会自动创建一个叫做master的分支<br>当我需要做某些功能的时候，我会去创建一个新分支进行开发<br>在开发完毕以后，会把这个分支的内容合并到master分支上<br>常用的分支名称：<br>master主要分支：主项目分支<br>只存在可以向外发布的完整版代码<br>deveLop主开发分支：存储项目所有代码<br>只存放开发完毕的代码<br>feature-xxx 主功能分支<br>存放一个一个功能<br>feature-xxx  解决bug的分支<br>用来进行修复bug<br>hotfix-xxx 临时解决<br>git分支的指令<br>git branch 查看当前分支<br>git branch 分支名称创建一个新分支<br>git checkout 分支名称切换分支</p><p>git 撤销，放弃本地修改<br>如果在修改时发现修改错误，而要放弃本地修改时，<br>一，<br>未使用 git add 缓存代码时。<br>可以使用 git checkout – filepathname (比如： git checkout – readme.md  ，不要忘记中间的 “–” ，不写就成了检出分支了！！)。放弃所有的文件修改可以使用 git checkout .  命令。<br>此命令用来放弃掉所有还没有加入到缓存区（就是 git add 命令）的修改：内容修改与整个文件删除。但是此命令不会删除掉刚新建的文件。因为刚新建的文件还没已有加入到 git 的管理系统中。所以对于git是未知的。自己手动删除就好了。<br>二，<br>已经使用了  git add 缓存了代码。<br>可以使用  git reset HEAD filepathname （比如： git reset HEAD readme.md）来放弃指定文件的缓存，放弃所以的缓存可以使用 git reset HEAD . 命令。<br>此命令用来清除 git  对于文件修改的缓存。相当于撤销 git add 命令所在的工作。在使用本命令后，本地的修改并不会消失，而是回到了如（一）所示的状态。继续用（一）中的操作，就可以放弃本地的修改。</p><p>三，<br>已经用 git commit  提交了代码。<br>可以使用 git reset –hard HEAD^ 来回退到上一次commit的状态。此命令可以用来回退到任意版本：git reset –hard  commitid<br>你可以使用 git log 命令来查看git的提交历史。git log 的输出如下,之一这里可以看到第一行就是 commitid：</p><p>git config –globalcore.autocrlf false</p><p>来自 &lt;<a class="link"   href="https://www.jianshu.com/p/60aefab47a36" >https://www.jianshu.com/p/60aefab47a36<i class="fas fa-external-link-alt"></i></a>&gt; </p><p><img                         lazyload                       alt="image"                       data-src="https://cdn.nlark.com/yuque/0/2022/png/25669443/1648730713030-7bc43fc2-ab75-4a04-a4a8-24cd95e9de17.png#averageHue=%231e3236&clientId=u631ea93a-f0b4-4&from=paste&id=uddb36b25&originHeight=1466&originWidth=2076&originalType=url&ratio=1&rotation=0&showTitle=false&size=601206&status=done&style=none&taskId=u8fe00cea-e32c-4bb9-be69-cfc3be347fd&title="                        alt="image.png"                 ></p><h2 id="提交前缀规范"><a href="#提交前缀规范" class="headerlink" title="提交前缀规范"></a>提交前缀规范</h2><p>feat：新增功能或页面；<br>delete：删除功能或文件；<br>fix： 修复问题&#x2F;BUG；<br>mod：不确定分类的修改；<br>docs：修改文档；<br>refactor：代码重构，未新增任何功能和修复任何bug；<br>build：改变构建流程，新增依赖库、工具等（例如webpack、gulp、npm修改）；<br>style：仅仅修改了空格、缩进、注释等，不改变代码逻辑的变动；<br>perf：改善性能和体现的修改；<br>chore：变更构建流程或辅助工具，非src和test的修改；<br>test：测试用例的新增、修改；<br>ci：自动化流程配置修改；<br>revert：回滚到上一个版本；</p><h2 id="FQA"><a href="#FQA" class="headerlink" title="FQA"></a>FQA</h2><h5 id="vscode文件状态"><a href="#vscode文件状态" class="headerlink" title="vscode文件状态"></a>vscode文件状态</h5><table><thead><tr><th>新建文件没有被git追踪</th><th>U</th></tr></thead><tbody><tr><td>修改文件状态</td><td>M</td></tr></tbody></table><h5 id="跳过esLink代码检查："><a href="#跳过esLink代码检查：" class="headerlink" title="跳过esLink代码检查："></a>跳过esLink代码检查：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;本次修改注释&quot; --no-verify</span><br></pre></td></tr></table></figure><p>–no-verify可以简写成 -n</p><h5 id="合并指定提交："><a href="#合并指定提交：" class="headerlink" title="合并指定提交："></a>合并指定提交：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick commit_id</span><br></pre></td></tr></table></figure><p>先通过git branch xx 切换到要合并的分支在使用 cherry-pick + hard id；hard id可以写多个。<br>cherry-pick w34..d534 表示w34到d534的区间。</p><h5 id="查看当前分支的提交图"><a href="#查看当前分支的提交图" class="headerlink" title="查看当前分支的提交图"></a>查看当前分支的提交图</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --all</span><br></pre></td></tr></table></figure><h5 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">#or</span><br><span class="line">git log --oneline</span><br><span class="line">#or</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><h5 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h5><p><code>--hard</code>后面带上索引可以指定切换到某个版本，可以使用<code>HEAD</code>来控制版本的前进和后退，<code>^</code>表示回退一个版本<code>^^</code>表示向后回退两个版本，如果回退版本多的话就要写很多<code>^</code>这是我们可以使用<code>~</code>代替要回退到几个版本如<code>HEAD~3</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">git reset --hard 1daabbf # 回退到指定版本</span><br><span class="line">#or</span><br><span class="line">git reset --hard HEAD^^ # 向后回退两个版本</span><br><span class="line">#or</span><br><span class="line">git reset --hard HEAD~3 # 向后回退三个版本</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>hard</code>、<code>mixed</code>、<code>soft</code>三者的区别：<br>–hard：</p><ul><li>会同时移动版本库、暂存区和工作区；</li></ul><p>–soft：</p><ul><li>仅移动版本库的HEAD指针，代码会退回到暂存区；</li></ul><p>–mixed：</p><ul><li>移动版本库的HEAD指针；</li><li>重置暂存区；</li><li>代码会退回到工作区；</li></ul><h5 id="比较差异"><a href="#比较差异" class="headerlink" title="比较差异"></a>比较差异</h5><p>使用<code>diff</code>比较文件差异，如果后面不带参数会比较工作区和暂存区的差异，如果不带文件名会比较所以文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><h5 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h5><p><code>git stash</code>将工作区和暂存区的代码储藏起来，需要注意的是没有被<code>git</code>追踪的文件（刚创建的文件）不会储藏，使用<code>git add[文件名]</code>让git追踪这个文件再进行<code>stash</code>就可以对新增的文件进行储藏了 。可以使用<code>git stash save &quot;measge&quot;</code>添加储藏信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash </span><br><span class="line"># or</span><br><span class="line">git stash save &quot;measge&quot;</span><br></pre></td></tr></table></figure><h6 id="查看储藏的列表"><a href="#查看储藏的列表" class="headerlink" title="查看储藏的列表"></a>查看储藏的列表</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><h6 id="弹出储藏"><a href="#弹出储藏" class="headerlink" title="弹出储藏"></a>弹出储藏</h6><p>将储藏列表中最新的内容弹出到当前分支上，并且删除储藏列表中的记录，<br><img                         lazyload                       alt="image"                       data-src="https://cdn.nlark.com/yuque/0/2022/png/25669443/1654655076261-ff6ba01e-40f3-4f21-a579-d8057df9f9e2.png#averageHue=%23f9f6f4&clientId=u89786573-24b5-4&from=paste&height=301&id=u0022dd6b&originHeight=452&originWidth=833&originalType=binary&ratio=1&rotation=0&showTitle=false&size=131003&status=done&style=none&taskId=ua97b2bad-9951-4b05-9a99-db6d142e3ab&title=&width=555.3333333333334"                        alt="image.png"                 ><br>看pop后面有一行是Dropped，在储藏列表删除了这个缓存<br>如果pop出来的内容有冲突，git会中断此次pop并告知你需要进行冲突解决<br>也可以指定储藏中的记录通过在<code>git stash pop</code>后面加上<code>git stash list</code>中的名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 弹出最新储藏</span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"># 弹出指定的储藏记录</span><br><span class="line">git stash pop stash@&#123;0&#125;</span><br></pre></td></tr></table></figure><h6 id="应用储藏"><a href="#应用储藏" class="headerlink" title="应用储藏"></a>应用储藏</h6><p><code>git stash apply</code>与<code>pop</code>类似，但他不会删除储藏记录，也可以指定储藏记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 应用最新储藏</span><br><span class="line">git stash apply</span><br><span class="line"></span><br><span class="line"># 应用指定的储藏记录</span><br><span class="line">git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure><h6 id="删除储藏"><a href="#删除储藏" class="headerlink" title="删除储藏"></a>删除储藏</h6><p>使用<code>git stash drop</code>删除单个储藏或<code>git stash clear</code>删除全部储藏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除指定储藏</span><br><span class="line">git stash drop [储藏名]</span><br><span class="line"></span><br><span class="line"># 删除全部储藏</span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure><h6 id="显示与当前工作区的差异"><a href="#显示与当前工作区的差异" class="headerlink" title="显示与当前工作区的差异"></a>显示与当前工作区的差异</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 显示差异</span><br><span class="line">git stash show [储藏名]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SVN与Git的最主要的区别&quot;&gt;&lt;a href=&quot;#SVN与Git的最主要的区别&quot; class=&quot;headerlink&quot; title=&quot;SVN与Git的最主要的区别?&quot;&gt;&lt;/a&gt;SVN与Git的最主要的区别?&lt;/h2&gt;&lt;p&gt;SVN的存储需要依赖一个服务器，而git</summary>
      
    
    
    
    <category term="git" scheme="https://geminglu.github.io/blog/categories/git/"/>
    
    
    <category term="Git" scheme="https://geminglu.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>ts中 interface 和 type 的概念和用法</title>
    <link href="https://geminglu.github.io/blog/2023/09/28/TypeScript/ts%E4%B8%AD%20interface%20%E5%92%8C%20type%20%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E7%94%A8%E6%B3%95/"/>
    <id>https://geminglu.github.io/blog/2023/09/28/TypeScript/ts%E4%B8%AD%20interface%20%E5%92%8C%20type%20%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E7%94%A8%E6%B3%95/</id>
    <published>2023-09-28T16:02:31.000Z</published>
    <updated>2024-04-16T09:24:28.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>type : 类型别名<br>概念：可以给一个或多个数据类型（string、number、…）取一个别名；<br>举例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> dataType=<span class="built_in">number</span> (给一个)</span><br><span class="line"><span class="keyword">type</span> dataType=<span class="built_in">number</span> | <span class="built_in">string</span> | turple</span><br></pre></td></tr></table></figure><p>interface：接口<br>概念：定义参数或方法的数据类型；</p><h2 id="两者的异同"><a href="#两者的异同" class="headerlink" title="两者的异同"></a>两者的异同</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><p>都可以描述一个对象或者函数<br>interface</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SetUser</span> &#123;</span><br><span class="line">  (<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>type</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetUser</span> = (<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure><p>2.interface 和 type 都可以拓展，并且两者并不是互相独立的，也就是说 interface 可以 extends type, type 也可以 extends interface. 虽然效果差不多，但是语法不同。<br>interface extends interface</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">extends</span> <span class="keyword">type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = <span class="title class_">Name</span> &amp; &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><p>interface extends type</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>type extends interface</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = <span class="title class_">Name</span> &amp; &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><p>1.类型别名可以用于其它类型 （联合类型、元组类型、基本类型（原始值）），interface 不支持</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPointX</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPointY</span> = &#123; <span class="attr">y</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// union(联合)</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPoint</span> = <span class="title class_">PartialPointX</span> | <span class="title class_">PartialPointY</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tuple(元祖)</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Data</span> = [<span class="title class_">PartialPointX</span>, <span class="title class_">PartialPointY</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//primitive(原始值)</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="title class_">Number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// typeof 的返回值</span></span><br><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">type</span> B = <span class="keyword">typeof</span> div;</span><br></pre></td></tr></table></figure><p>2.interface 可以多次定义 并被视为合并所有声明成员 type 不支持</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: <span class="title class_">Point</span> = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//User 接口为：</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.type 能使用 in 关键字生成映射类型，但 interface 不行。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Keys</span> = <span class="string">&quot;firstname&quot;</span> | <span class="string">&quot;surname&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DudeType</span> = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> <span class="title class_">Keys</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">test</span>: <span class="title class_">DudeType</span> = &#123;</span><br><span class="line">  <span class="attr">firstname</span>: <span class="string">&quot;Pawel&quot;</span>,</span><br><span class="line">  <span class="attr">surname</span>: <span class="string">&quot;Grzybek&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4.默认导出方式不同</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inerface 支持同时声明，默认导出 而 type 必须先声明后导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">interface</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同一个 js 模块只能存在一个默认导出哦</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Config2</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Config2</span>;</span><br></pre></td></tr></table></figure><p>5.type 可以使用联合类型和交集，interface 不能使用联合类型和交集组合。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TPersonA</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TPersonB</span> = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPerson</span> = <span class="title class_">TPersonA</span> &amp; <span class="title class_">TPersonB</span>;</span><br><span class="line"><span class="comment">// 并集 联合类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPerson</span> = <span class="title class_">TPersonA</span> | <span class="title class_">TPersonB</span>;</span><br></pre></td></tr></table></figure><p>type 其他骚操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">StringOrNumber</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Text</span> = <span class="built_in">string</span> | &#123; <span class="attr">text</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameLookup</span> = <span class="title class_">Dictionary</span>&lt;<span class="built_in">string</span>, <span class="title class_">Person</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Callback</span>&lt;T&gt; = <span class="function">(<span class="params">data: T</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Pair</span>&lt;T&gt; = [T, T];</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Coordinates</span> = <span class="title class_">Pair</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Tree</span>&lt;T&gt; = T | &#123; <span class="attr">left</span>: <span class="title class_">Tree</span>&lt;T&gt;; <span class="attr">right</span>: <span class="title class_">Tree</span>&lt;T&gt; &#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般来说，能用 interface 实现，就用 interface，如果不能就用 type。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;type : 类型别名&lt;br&gt;概念：可以给一个或多个数据类型（string、number、…）取一个别名；&lt;br&gt;举例：&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/categories/TypeScript/"/>
    
    
    <category term="前端" scheme="https://geminglu.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 实用工具类型之 Pick 类型</title>
    <link href="https://geminglu.github.io/blog/2023/09/28/TypeScript/TypeScript%20%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%E4%B9%8B%20Pick%20%E7%B1%BB%E5%9E%8B/"/>
    <id>https://geminglu.github.io/blog/2023/09/28/TypeScript/TypeScript%20%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%E4%B9%8B%20Pick%20%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-09-28T15:54:33.000Z</published>
    <updated>2024-04-16T09:24:28.199Z</updated>
    
    <content type="html"><![CDATA[<p>我们将在本系列的每一篇文章中分别深入研究常用工具类型的详细信息。在本部分中，我们将介绍如何使用 Pick&lt;Type, Keys&gt; 从基类型或接口中挑选一些属性，从而从现有类型生成新类型。</p><h2 id="1-什么是对象类型转换？"><a href="#1-什么是对象类型转换？" class="headerlink" title="1.什么是对象类型转换？"></a>1.什么是对象类型转换？</h2><p>对象类型转换是指从表示对象的现有类型或接口生成修改的类型。这样的转换与一个或多个属性相关。<br>TypeScript 有各种实用工具，允许我们实现不同类型的对象类型转换，比如从已有的类型中选择或省略属性。<br>当我们需要一堆相似的对象类型时，对象类型转换变得非常方便，否则必须单独定义它们。我们不需要单独定义每个类型，而是可以利用 TypeScript 的转换实用工具，通过要求进行小的调整，从现有类型生成新类型。通过这种方式，我们能够使我们的类型可重用，并在模块系统的任何地方随时生成它们。<br>对象类型转换不同于使用<code>extends</code>关键字的对象接口继承，特别是因为继承只能在对象接口上使用，而不能用于类型。尽管转换也可以使用相同的实用工具应用于对象接口，但它们通常用于创建新的对象类型。<br>我们将基于下面的场景构建本系列中的示例，该场景涉及几种不同类型的用户。虽然重点将放在对象类型上，但我们也将把接口纳入讨论。<br><img                         lazyload                       alt="image"                       data-src="/blog/images/fbb07fa6ee1d71247edd65a7dfdb344a.png"                                        ><br>假设我们有一堆用户实体，它们与博客的交互方式各不相同。基本上，不管他们是访客用户、订阅者、编辑器还是管理员等等。上面的 ERD 显示了它们在后台的类型。<br>现在，如果我们想为前端 API 调用建模这些类型，我们可以为每个用户类型手动编写 TypeScript 类型——这显然违反了 DRY（不要写重复的代码）原则，因为我们为每个用户类型重复了几个公共属性。我们也可以使用接口继承，但这不在本系列的讨论范围之内。<br>所以，我们要做的是使用 TypeScript 的转换实用工具从基类型中生成我们需要的类型。为了进行正确的转换，我们需要方便地设置正确的基类型，然后将其与生成目标类型的实用工具配对。<br>例如，在本文中，我们将考虑<code>Pick&lt;Type, Keys&gt;</code>的用例。</p><h2 id="2-什么是-TypeScript-Pick？"><a href="#2-什么是-TypeScript-Pick？" class="headerlink" title="2.什么是 TypeScript Pick？"></a>2.什么是 TypeScript Pick？</h2><h3 id="2-1-用-Pick-选择项"><a href="#2-1-用-Pick-选择项" class="headerlink" title="2.1 用 Pick&lt;Type, Keys&gt; 选择项"></a>2.1 用 Pick&lt;Type, Keys&gt; 选择项</h3><p>对于图中的上述实体，将<code>SuperbUser</code>作为基类型是有意义的，因为它包含了存在于所有其他用户类型上的所有属性。<br>我们将首先定义 SuperbUser 的接口：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SuperbUser</span> &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">roles</span>: (<span class="string">&#x27;Admin&#x27;</span> | <span class="string">&#x27;Editor&#x27;</span> | <span class="string">&#x27;Author&#x27;</span>)[]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在，如果我们想从<code>SuperbUser</code>生成一个<code>GuestUser</code>类型，我们只需要选择<code>userId</code>,<code>macAddress</code>和 <code>username</code>属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">GuestUser</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">SuperbUser</span>, <span class="string">&#x27;userId&#x27;</span> | <span class="string">&#x27;macAddress&#x27;</span> | <span class="string">&#x27;username&#x27;</span>&gt;;</span><br></pre></td></tr></table></figure><p>TypeScript<code>Pick</code>将基类型作为第一个参数，将我们想要从基类型中选取的键的并集作为第二个参数。使用这两种类型来声明实际对象会给我们提供具有各自属性的对象：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">me</span>: <span class="title class_">SuperbUser</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="string">&#x27;1.2.3.4&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;夏安&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;xiaan@163.com&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;an&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;xia&#x27;</span>,</span><br><span class="line">  <span class="attr">roles</span>: [<span class="string">&#x27;Admin&#x27;</span>, <span class="string">&#x27;Editor&#x27;</span>, <span class="string">&#x27;Author&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">guest</span>: <span class="title class_">GuestUser</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="string">&#x27;4.3.2.1&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(me.<span class="property">roles</span>); <span class="comment">// [&quot;Admin&quot;, &quot;Editor&quot;, &quot;Author&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(guest.<span class="property">username</span>); <span class="comment">// &quot;xxx&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(guest.<span class="property">roles</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><code>guest.roles</code>在运行时未定义，在此之前 TypeScript 就会抛出一个错误：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Property &#x27;roles&#x27; does not exist on type &#x27;GuestUser&#x27;.</span></span><br></pre></td></tr></table></figure><h3 id="2-2-只能用来生成类型"><a href="#2-2-只能用来生成类型" class="headerlink" title="2.2 只能用来生成类型"></a>2.2 只能用来生成类型</h3><p>注意，我们将 GuestUser 定义为具有 type 关键字的类型，尽管我们使用接口作为基。这是因为 TypeScript Pick&lt;Type, Keys&gt; 只能用来生成类型而不是接口。如果我们试图用 interface 来定义它，TypeScript 会抛出一个错误：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GuestUser</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">SuperbUser</span>, &#x27;userId&#x27; | &#x27;macAddress&#x27; | &#x27;username&#x27;&gt;;</span><br><span class="line">// &#x27;<span class="title class_">Pick</span>&#x27; only refers to a type, but is being used as a value here.</span><br></pre></td></tr></table></figure><h3 id="2-3-从类型中选择"><a href="#2-3-从类型中选择" class="headerlink" title="2.3 从类型中选择"></a>2.3 从类型中选择</h3><p>转换对于类型比接口更有用，因为我们不能继承类型。如果我们将<code>SuperbUser</code>接口转换为一种类型，我们会得到相同的结果：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SuperbUser</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">roles</span>: (<span class="string">&#x27;Admin&#x27;</span> | <span class="string">&#x27;Editor&#x27;</span> | <span class="string">&#x27;Author&#x27;</span>)[]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">GuestUser</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">SuperbUser</span>, <span class="string">&#x27;userId&#x27;</span> | <span class="string">&#x27;macAddress&#x27;</span> | <span class="string">&#x27;username&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">me</span>: <span class="title class_">SuperbUser</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="string">&#x27;1.2.3.4&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;夏安&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;xiaan@163.com&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;an&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;xia&#x27;</span>,</span><br><span class="line">  <span class="attr">roles</span>: [<span class="string">&#x27;Admin&#x27;</span>, <span class="string">&#x27;Editor&#x27;</span>, <span class="string">&#x27;Author&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">guest</span>: <span class="title class_">GuestUser</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="string">&#x27;4.3.2.1&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(me.<span class="property">roles</span>); <span class="comment">// [&quot;Admin&quot;, &quot;Editor&quot;, &quot;Author&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(guest.<span class="property">username</span>); <span class="comment">// &quot;xxx&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(guest.<span class="property">roles</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="2-4-谨慎使用"><a href="#2-4-谨慎使用" class="headerlink" title="2.4 谨慎使用"></a>2.4 谨慎使用</h3><p>现在，如果希望为<code>Subscriber</code>实体派生一个类型，则需要选择除<code>roles</code>之外的所有属性。但是，列出作为第二个参数传递的<code>union</code>类型中的所有属性是没有意义的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工具类型的选择不当</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Subscriber</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">SuperbUser</span>, <span class="string">&#x27;userId&#x27;</span> | <span class="string">&#x27;macAddress&#x27;</span> | <span class="string">&#x27;username&#x27;</span> | <span class="string">&#x27;email&#x27;</span> | ... &gt;;</span><br></pre></td></tr></table></figure><p>相反，我们可以直接忽略实用程序类型中传递的角色。正如我们将在下一篇文章中看到的，我们可以用<code>Omit&lt;Type, Keys&gt;</code>来实现这一点。</p><h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h2><p>在这篇文章中，我们发现当我们有共享属性的对象时，对象类型转换允许我们从基类型派生出类似的类型。我们看了一个例子，它使用 TypeScript Pick&lt;&gt; 从一个更大的类型中选择一些属性来创建一个新类型。我们发现，类型转换可以同时接受接口和类型作为其基础，但是生成的类型不能声明为接口。<br>当我们有更多的属性可以选择而更少的属性可以省略则可以使用<code>Omit&lt;&gt;</code>（与 <code>Pick&lt;&gt;</code>相反的工具类型）。我们将在下一篇文章中讨论它。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们将在本系列的每一篇文章中分别深入研究常用工具类型的详细信息。在本部分中，我们将介绍如何使用 Pick&amp;lt;Type, Keys&amp;gt; 从基类型或接口中挑选一些属性，从而从现有类型生成新类型。&lt;/p&gt;
&lt;h2 id=&quot;1-什么是对象类型转换？&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/categories/TypeScript/"/>
    
    
    <category term="前端" scheme="https://geminglu.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>接口interface</title>
    <link href="https://geminglu.github.io/blog/2023/09/28/TypeScript/%E6%8E%A5%E5%8F%A3interface/"/>
    <id>https://geminglu.github.io/blog/2023/09/28/TypeScript/%E6%8E%A5%E5%8F%A3interface/</id>
    <published>2023-09-28T15:54:33.000Z</published>
    <updated>2024-04-16T09:24:28.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-接口的定义"><a href="#1-接口的定义" class="headerlink" title="1.接口的定义"></a>1.接口的定义</h2><p>在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到了限制和规范作用。接口定义了某些类所需要遵守的规范，接口不关心这些类的内部状态数据，也不关心这些类里面的方法实现细节，它只规定这些类里必须提供某些方法，提供这些方法的类可以满足实际需要。typescript中的接口类似于Java，同时还增加了跟灵活的接口类型，包括属性、函数、可索引和类等。</p><h2 id="2-接口类型"><a href="#2-接口类型" class="headerlink" title="2.接口类型"></a>2.接口类型</h2><ul><li>属性类型接口</li><li>函数类型接口</li><li>可索引接口</li><li>类类型接口</li><li>接口的继承</li></ul><h2 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h2><h3 id="属性类接口"><a href="#属性类接口" class="headerlink" title="属性类接口"></a>属性类接口</h3><p>定义JSON规范</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FullName</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> id?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">user</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span></span><br><span class="line">  age?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prontName</span>(<span class="params">name: FullName</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">user</span>, name.<span class="property">password</span>, name.<span class="property">age</span> || <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Name</span>: <span class="title class_">FullName</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&quot;123&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// prontName(&quot;zhansan&quot;)    // 错误写法 必须传入对象</span></span><br><span class="line"><span class="comment">// prontName(&#123;user:&quot;zhansan&quot;,password:123&#125;)    // 错误写法 password必须是string类型</span></span><br><span class="line"><span class="comment">// prontName(&#123;user:&quot;lisi&quot;&#125;) // 错误写法 必须和接口定义的一样不可缺少属性</span></span><br><span class="line"><span class="comment">// prontName(&#123;user:&quot;wangwu&quot;,password:&quot;123&quot;,sex:true&#125;)  // 错误写法 sex不在FillName中</span></span><br><span class="line"><span class="title function_">prontName</span>(&#123; <span class="attr">user</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">password</span>: <span class="string">&quot;123&quot;</span> &#125;)  <span class="comment">// 正确写法,age可传可不传</span></span><br><span class="line"><span class="title function_">prontName</span>(&#123; <span class="attr">user</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">password</span>: <span class="string">&quot;123&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)  <span class="comment">// 正确写法</span></span><br><span class="line"><span class="comment">// Name.id = 2  // 错误写法，id是只读的不可以修改</span></span><br></pre></td></tr></table></figure><h3 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h3><p>约束函数的形参和返回值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> sumType &#123;</span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let sum: sumType = function (a, b) &#123;</span></span><br><span class="line"><span class="comment">//     return &quot;a+b+&quot; + a + b   // 错误写法，函数必须返回number类型</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(sum(1, 2));</span></span><br><span class="line"><span class="comment">// let sum: sumType = function (a, b) &#123;</span></span><br><span class="line"><span class="comment">//     return &quot;a+b+&quot; + a + b</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(sum(1, &quot;2&quot;));   // 错误写法，函数的实参波许是string类型</span></span><br><span class="line"><span class="comment">// let sum: sumType = function(a:string, b:number):number &#123;    // 错误写法，函数中定义的形参和返回值必须和接口中定义的一直</span></span><br><span class="line"><span class="comment">//     return a + b</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(sum(1, 2));</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sum</span>: sumType = <span class="keyword">function</span> (<span class="params">a:<span class="built_in">number</span>, b:<span class="built_in">number</span></span>):<span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">mySum</span>: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span> = <span class="keyword">function</span> (<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mySum</span>(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">user</span>(<span class="string">&quot;张三&quot;</span>));  <span class="comment">// 正确写法</span></span><br></pre></td></tr></table></figure><blockquote><p> 注意：这里的’&#x3D;&gt;’不要和ES6中的’&#x3D;&gt;’混淆了，在 TypeScript 的类型定义中，’&#x3D;&gt;’用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。在ES6中’&#x3D;&gt;’叫做箭头函数。</p></blockquote><h3 id="可索引接口"><a href="#可索引接口" class="headerlink" title="可索引接口"></a>可索引接口</h3><p>对数组、对象进行约束<br>对数组的约束</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> userArr&#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span> <span class="comment">//数组的index都是number类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let arr:userArr = [&quot;张三&quot;, 23]   // 错误写法，数组的值必须都是string类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:userArr = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>]</span><br></pre></td></tr></table></figure><p>对对象的约束</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> userObj&#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">string</span>]: <span class="built_in">number</span> <span class="comment">// 对象的可以是string类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let Obj:userObj = &#123;name:&quot;zhangsan&quot;&#125;  // 错误写法，对象的value必须是number类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Obj</span>:userObj = &#123;<span class="attr">age</span>: <span class="number">123</span>&#125;    <span class="comment">// 正确写法</span></span><br></pre></td></tr></table></figure><h3 id="类类型接口"><a href="#类类型接口" class="headerlink" title="类类型接口"></a>类类型接口</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">hobby</span>(<span class="attr">str</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// class person implements Animal&#123;  // 错误写法，必须有name属性</span></span><br><span class="line"><span class="comment">//     user: string</span></span><br><span class="line"><span class="comment">//     constructor(name: string)&#123;</span></span><br><span class="line"><span class="comment">//         this.user = name</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     hobby(str: string)&#123;</span></span><br><span class="line"><span class="comment">//         console.log(this.user + &quot;喜欢&quot; + str || &quot;篮球&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// class person implements Animal&#123;</span></span><br><span class="line"><span class="comment">//     name: string</span></span><br><span class="line"><span class="comment">//     constructor(name: string)&#123;</span></span><br><span class="line"><span class="comment">//         this.name = name</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     hobby(str: number)&#123;  // 错误写法，hobby参数类型必须是string类型</span></span><br><span class="line"><span class="comment">//         console.log(this.name + &quot;喜欢&quot; + str || &quot;篮球&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">hobby</span>(<span class="params">str: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;喜欢&quot;</span> + str || <span class="string">&quot;篮球&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">new</span> <span class="title function_">person</span>(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">hobby</span>(<span class="string">&quot;打游戏&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h3><p>TS中的继承与ES6中的class继承类似，子接口可以继承父接口使用父接口定义的规则</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> dom &#123;</span><br><span class="line">  <span class="title function_">move</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Human</span> <span class="keyword">extends</span> dom &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let jack: Human = &#123; // 错误写法，因为Human接口继承了dom接口所以move不可以缺少</span></span><br><span class="line"><span class="comment">//     // age: 18,</span></span><br><span class="line"><span class="comment">//     name: &#x27;Jack&#x27;,</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">jack</span>: <span class="title class_">Human</span> = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="title function_">move</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;move&#x27;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确的写法</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-接口的定义&quot;&gt;&lt;a href=&quot;#1-接口的定义&quot; class=&quot;headerlink&quot; title=&quot;1.接口的定义&quot;&gt;&lt;/a&gt;1.接口的定义&lt;/h2&gt;&lt;p&gt;在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到了限制和</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/categories/TypeScript/"/>
    
    
    <category term="前端" scheme="https://geminglu.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>数据类型</title>
    <link href="https://geminglu.github.io/blog/2023/09/28/TypeScript/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://geminglu.github.io/blog/2023/09/28/TypeScript/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-09-28T15:38:31.000Z</published>
    <updated>2024-04-16T09:24:28.199Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔类型（boolean）</span></span><br><span class="line"><span class="comment">// 数字类型（number）</span></span><br><span class="line"><span class="comment">// 数组类型（array）</span></span><br><span class="line"><span class="comment">// 元素类型（enum）</span></span><br><span class="line"><span class="comment">// 任意类型（any）</span></span><br><span class="line"><span class="comment">// null和undefined</span></span><br><span class="line"><span class="comment">// void类型</span></span><br><span class="line"><span class="comment">// never类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  在ts中定义变量必须指定类型</span></span><br><span class="line"><span class="comment">// var flag:boolean = 123;     ❎</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">flagf</span>:boolean = <span class="literal">true</span>;    <span class="comment">//✅</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">num</span>:number = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">str</span>:string = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数组ts也可以跟ES5一样的方式来定义数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">12</span>];</span><br><span class="line"><span class="comment">// ts里时这样定义的</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr1</span>:number[] = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>] <span class="comment">//✅</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr2</span>:string[] = [<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;43&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;43&#x27;</span>]</span><br><span class="line"><span class="comment">// var arr1:number[] = [1,4,&quot;6&quot;,3,5]   // 数组里必须都是字符串不然会保存❎</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组类型（tuple）是数组的一种</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr3</span>:[number,string] = [<span class="number">123</span>,<span class="string">&#x27;typescript&#x27;</span>]</span><br><span class="line"><span class="comment">// var arr3:[number,string] = [&#x27;typescript&#x27;,123]   // ❎ 必须按照定义的顺序来</span></span><br><span class="line"><span class="comment">// var arr3:[number,string] = [&#x27;typescript&#x27;,&quot;123&quot;]   // ❎</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举类型</span></span><br><span class="line">enum <span class="title class_">Flag</span> &#123;succ=<span class="number">1</span>,error=<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">f</span>:<span class="title class_">Flag</span> = <span class="title class_">Flag</span>.<span class="property">succ</span>;</span><br><span class="line"><span class="comment">// var f:Flag = Flag.error;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f)  </span><br><span class="line">enum <span class="title class_">Color</span> &#123;blue,red,<span class="string">&#x27;orange&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">c</span>:<span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">red</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)  <span class="comment">// 1    如果标识符没有赋值他的值就是他在集合中的下标，如果把第一个标识符的值改成了2那么第二个标识符的值就是3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// any任意类型，和ES5中没有指定类型是一样的</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">a1</span>:any = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">a1</span>:any = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">a1</span>:any = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// null和undefined</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">b1</span>:number;</span><br><span class="line"><span class="comment">// console.log(b1);    // 如果一个变量定义了没有赋值就使用了在ts中就会报错</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">b2</span>:<span class="literal">null</span> | <span class="literal">undefined</span>;    <span class="comment">// 可以给他定义一个null | undefined，那他就不会报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b2) <span class="comment">// null</span></span><br><span class="line"><span class="comment">// void类型,表示方法没有返回任何类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>):<span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">run</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// never类型（包括null和undefined）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/categories/TypeScript/"/>
    
    
    <category term="前端" scheme="https://geminglu.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 实用工具类型之 Omit 类型</title>
    <link href="https://geminglu.github.io/blog/2023/09/28/TypeScript/TypeScript%20%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%E4%B9%8B%20Omit%20%E7%B1%BB%E5%9E%8B/"/>
    <id>https://geminglu.github.io/blog/2023/09/28/TypeScript/TypeScript%20%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%E4%B9%8B%20Omit%20%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-09-28T15:23:12.000Z</published>
    <updated>2024-04-16T09:24:28.199Z</updated>
    
    <content type="html"><![CDATA[<p>在本文中，我们将讨论 TypeScript 中使用<code>Omit&lt;&gt;</code>的对象类型转换。这是 TypeScript 实用工具类型系列的第二部分。<br>在上一篇文章（<a class="link"   href="https://www.yuque.com/geminglu/web/tub1ueqfotbudiub" >TypeScript 实用工具类型之 Pick 类型<i class="fas fa-external-link-alt"></i></a>）中，我们介绍了一个例子，在这个例子中，我们通过 <code>Pick&lt;&gt;</code>从基本类型<code>SuperbUser</code>中选择一些属性来派生一个<code>GuestUser</code>类型。之后暗示过，如果要选择的属性数量大于被丢弃的属性数量，那么选择就会变得不那么方便。在这种情况下，我们应该使用<code>Omit&lt;&gt;</code>。<br>在这篇文章中，我们将通过为<code>Subscriber</code>实体创建一个类型来考虑一个<code>Omit&lt;&gt;</code>的例子。</p><h2 id="1-示例"><a href="#1-示例" class="headerlink" title="1.示例"></a>1.示例</h2><p>像<code>Pick&lt;&gt;</code>一样，<code>Omit&lt;&gt;</code>接受基类型作为第一个参数，接受要省略的键的联合类型作为第二个参数，并返回排除这些属性的派生类型。<br>回过头来看 ERD，<code>Subscriber</code>实体具有与<code>SuperbUser</code>相同的所有属性——除了 <code>roles</code>：<br><img                         lazyload                       alt="image"                       data-src="/blog/images/df060b0f2d93412b3f9fb9363b565243.png"                                        ><br>从<code>SuperbUser</code>派生<code>Subscriber</code>类型显然需要我们只忽略<code>roles</code>属性，而不是选择其他所有属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SuperbUser</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">roles</span>: (<span class="string">&#x27;Admin&#x27;</span> | <span class="string">&#x27;Editor&#x27;</span> | <span class="string">&#x27;Author&#x27;</span>)[]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Subscriber</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">SuperbUser</span>, <span class="string">&#x27;roles&#x27;</span>&gt;;</span><br></pre></td></tr></table></figure><p>因此，在本例中，TypeScript 的<code>Omit&lt;&gt;</code>比<code>Pick&lt;&gt;</code>更方便。我们现在可以创建一个<code>subscriber</code>对象，它的字段中删除了<code>roles</code>属性:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">subscriber</span>: <span class="title class_">Subscriber</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="string">&#x27;132546&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;xiaan&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;xiaan@163.com&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;an&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;xia&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subscriber);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;userId&quot;: 4,</span></span><br><span class="line"><span class="comment">  &quot;macAddress&quot;: &quot;132546&quot;,</span></span><br><span class="line"><span class="comment">  &quot;username&quot;: &quot;xiaan&quot;,</span></span><br><span class="line"><span class="comment">  &quot;email&quot;: &quot;xiaan@163.com&quot;,</span></span><br><span class="line"><span class="comment">  &quot;password&quot;: &quot;12345678&quot;,</span></span><br><span class="line"><span class="comment">  &quot;firstName&quot;: &quot;an&quot;,</span></span><br><span class="line"><span class="comment">  &quot;lastName&quot;: &quot;xia&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subscriber.<span class="property">roles</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>现在，让我们试着向 subscriber 添加 roles属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subscriber.<span class="property">roles</span> = [<span class="string">&#x27;Reader&#x27;</span>, <span class="string">&#x27;Commenter&#x27;</span>]; <span class="comment">// Property &#x27;roles&#x27; does not exist on type &#x27;Subscriber&#x27;.</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subscriber.<span class="property">roles</span>); <span class="comment">// [&quot;Reader&quot;, &quot;Commenter&quot;]</span></span><br></pre></td></tr></table></figure><p>TypeScript 抛出一个错误：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Property &#x27;roles&#x27; does not exist on type &#x27;Subscriber&#x27;.</span></span><br></pre></td></tr></table></figure><h2 id="2-应用于-Interface"><a href="#2-应用于-Interface" class="headerlink" title="2. 应用于 Interface"></a>2. 应用于 Interface</h2><p>就像在<code>Pick&lt;&gt;</code>中一样，我们可以使用<code>SuperbUser</code>的接口，结果是一样的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SuperbUser</span> &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">roles</span>: (<span class="string">&#x27;Admin&#x27;</span> | <span class="string">&#x27;Editor&#x27;</span> | <span class="string">&#x27;Author&#x27;</span>)[]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Subscriber</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">SuperbUser</span>, <span class="string">&#x27;roles&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">subscriber</span>: <span class="title class_">Subscriber</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="string">&#x27;132546&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;xiaan&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;xiaan@163.com&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;an&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;xia&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subscriber);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;userId&quot;: 4,</span></span><br><span class="line"><span class="comment">  &quot;macAddress&quot;: &quot;132546&quot;,</span></span><br><span class="line"><span class="comment">  &quot;username&quot;: &quot;xiaan&quot;,</span></span><br><span class="line"><span class="comment">  &quot;email&quot;: &quot;xiaan@163.com&quot;,</span></span><br><span class="line"><span class="comment">  &quot;password&quot;: &quot;12345678&quot;,</span></span><br><span class="line"><span class="comment">  &quot;firstName&quot;: &quot;an&quot;,</span></span><br><span class="line"><span class="comment">  &quot;lastName&quot;: &quot;xia&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subscriber.<span class="property">roles</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="3-谨慎使用"><a href="#3-谨慎使用" class="headerlink" title="3. 谨慎使用"></a>3. 谨慎使用</h2><p>与 Pick&lt;&gt; 一样，Typescript Omit 的第二个参数也接受键的并集。因此，如果需要省略任何其他属性，可以使用操作符 | 将它们添加到第二个参数中：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Subscriber</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">SuperbUser</span>, <span class="string">&#x27;roles&#x27;</span> | <span class="string">&#x27;firstName&#x27;</span> | ...&gt;;</span><br></pre></td></tr></table></figure><p>当需要省略的属性多于需要选取的属性时，应该避免使用<code>Omit&lt;&gt;</code>，而使用<code>Pick&lt;&gt;</code>。</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h2><p>在本文中，我们通过一个示例深入研究了<code>Omit&lt;&gt;</code>，该示例通过从基本类型<code>SuperbUser</code>中省略一个属性来为 Subscriber 实体派生一个类型。我们看到，<code>Omit&lt;&gt;</code> 与<code>Pick&lt;&gt;</code>相反，当我们想从基类型中选取更多属性并较少省略时，<code>Omit&lt;&gt;</code>更加方便。<br>在下一篇文章中，我们将介绍使用<code>Partial</code>的对象类型转换。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在本文中，我们将讨论 TypeScript 中使用&lt;code&gt;Omit&amp;lt;&amp;gt;&lt;/code&gt;的对象类型转换。这是 TypeScript 实用工具类型系列的第二部分。&lt;br&gt;在上一篇文章（&lt;a class=&quot;link&quot;   href=&quot;https://www.yuqu</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/categories/TypeScript/"/>
    
    
    <category term="前端" scheme="https://geminglu.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 实用工具类型之 Partial 类型</title>
    <link href="https://geminglu.github.io/blog/2023/09/28/TypeScript/TypeScript%20%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%E4%B9%8B%20Partial%20%E7%B1%BB%E5%9E%8B/"/>
    <id>https://geminglu.github.io/blog/2023/09/28/TypeScript/TypeScript%20%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B%E4%B9%8B%20Partial%20%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-09-28T15:23:12.000Z</published>
    <updated>2024-04-16T09:24:28.199Z</updated>
    
    <content type="html"><![CDATA[<p>在本文中，我们将使用<code>Partial&lt;&gt;</code>来讨论 TypeScript 中的对象类型转换。这是 TypeScript 实用工具类型系列的第三部分。<br>在上一篇文章（<a class="link"   href="https://www.yuque.com/geminglu/web/ykexs5ltnnr5d2tg" >TypeScript 实用工具类型Omit类型<i class="fas fa-external-link-alt"></i></a>），我们介绍了一个示例，在该示例中，我们通过省略基本类型<code>SuperbUser</code>的一个属性（使用<code>Omit&lt;&gt;</code>）来派生<code>Subscriber</code>类型。<br>在这篇文章中，我们将考虑一个 TypeScript Partial&lt;&gt; 的例子，通过修改我们的<code>Subscriber</code>类型来假设一个更现实的场景。</p><h2 id="1-场景概述"><a href="#1-场景概述" class="headerlink" title="1.场景概述"></a>1.场景概述</h2><p>对于我们的博客，我们会有不允许点赞或评论文章的 GuestUser。我们将允许 Subscriber 点赞和评论。所以，情况是这样的：</p><ul><li>GuestUser 必须用他们的 email 注册并成为 Subscriber 。</li><li>他们会在发送到自己邮箱的 email 中收到设置 password 的链接。</li><li>然后他们能够设置他们的 password，firstName 和 lastName。</li></ul><p>在这种情况下，我们之前派生的 Subscriber 类型不能以我们想要的方式交付我们的需求：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Subscriber</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">subscriber</span>: <span class="title class_">Subscriber</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="string">&#x27;1.2.3&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;xiaan&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;xiaan@163.com&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subscriber);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">From TypeScript Error:</span></span><br><span class="line"><span class="comment">&quot;Type &#x27;&#123; userId: number; macAddress: string; username: string; email: string; &#125;&#x27; is missing the following properties from type &#x27;Subscriber&#x27;: password, firstName, lastName&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">From console:</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;userId&quot;: 4,</span></span><br><span class="line"><span class="comment">  &quot;macAddress&quot;: &quot;1.2.3&quot;,</span></span><br><span class="line"><span class="comment">  &quot;username&quot;: &quot;xiaan&quot;,</span></span><br><span class="line"><span class="comment">  &quot;email&quot;: &quot;xiaan@163.com&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>TypeScript 指出<code>subscriber</code>与<code>Subscriber</code>类型不一致。这是因为它默认将所有字段设置为必需的。如果我们设置<code>password</code>，<code>firstName</code>和<code>lastName</code>为可选，则不会报错：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Subscriber</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>,</span><br><span class="line">  password?: <span class="built_in">string</span>,</span><br><span class="line">  firstName?: <span class="built_in">string</span>,</span><br><span class="line">  lastName?: <span class="built_in">string</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">subscriber</span>: <span class="title class_">Subscriber</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="string">&#x27;1.2.3&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;xiaan&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;xiaan@163.com&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subscriber);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;userId&quot;: 4,</span></span><br><span class="line"><span class="comment">  &quot;macAddress&quot;: &quot;1.2.3&quot;,</span></span><br><span class="line"><span class="comment">  &quot;username&quot;: &quot;xiaan&quot;,</span></span><br><span class="line"><span class="comment">  &quot;email&quot;: &quot;xiaan@163.com&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>但是这需要首先手动定义<code>Subscriber</code>，然后再设置各个可选属性。在实际的 API 中，手动定义形状并不是一个好主意。</p><h2 id="2-Partial"><a href="#2-Partial" class="headerlink" title="2.Partial"></a>2.Partial</h2><p>我们希望消除这种麻烦，并更轻松地从<code>Omit&lt;&gt;</code>返回的类型中完成此工作。所以我们要做的是用<code>Partial</code>将返回类型的所有属性设置为可选的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">SuperbUser</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">roles</span>: (<span class="string">&#x27;Admin&#x27;</span> | <span class="string">&#x27;Editor&#x27;</span> | <span class="string">&#x27;Author&#x27;</span>)[]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Subscriber</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Omit</span>&lt;<span class="title class_">SuperbUser</span>, <span class="string">&#x27;roles&#x27;</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">subscriber</span>: <span class="title class_">Subscriber</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="string">&#x27;1.2.3&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;xiaan&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;xiaan@163.com&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subscriber);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;userId&quot;: 4,</span></span><br><span class="line"><span class="comment">  &quot;macAddress&quot;: &quot;1.2.3&quot;,</span></span><br><span class="line"><span class="comment">  &quot;username&quot;: &quot;xiaan&quot;,</span></span><br><span class="line"><span class="comment">  &quot;email&quot;: &quot;xiaan@163.com&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>现在我们可以自由的为<code>password</code>，<code>firstName</code>和<code>lastName</code>赋值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">subscriber.<span class="property">password</span> = <span class="string">&#x27;12345678&#x27;</span>;</span><br><span class="line">subscriber.<span class="property">firstName</span> = <span class="string">&#x27;an&#x27;</span>;</span><br><span class="line">subscriber.<span class="property">lastName</span> = <span class="string">&#x27;xia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subscriber);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;userId&quot;: 4,</span></span><br><span class="line"><span class="comment">  &quot;macAddress&quot;: &quot;1.2.3&quot;,</span></span><br><span class="line"><span class="comment">  &quot;username&quot;: &quot;xiaan&quot;,</span></span><br><span class="line"><span class="comment">  &quot;email&quot;: &quot;xiaan@163.com&quot;,</span></span><br><span class="line"><span class="comment">  &quot;password&quot;: &quot;12345678&quot;,</span></span><br><span class="line"><span class="comment">  &quot;firstName&quot;: &quot;an&quot;,</span></span><br><span class="line"><span class="comment">  &quot;lastName&quot;: &quot;xia&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>但是，就像之前一样，如果我们添加了不属于<code>Subscriber</code>的属性，TypeScript 会再次报错：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">subscriber.<span class="property">roles</span> = [<span class="string">&#x27;Reader&#x27;</span>, <span class="string">&#x27;Commenter&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subscriber);</span><br><span class="line"><span class="comment">// Property &#x27;roles&#x27; does not exist on type &#x27;Partial&lt;Omit&lt;SuperbUser, &quot;roles&quot;&gt;&gt;&#x27;.</span></span><br></pre></td></tr></table></figure><p>因此，使用 TypeScript 派生<code>partial</code>类型的好处包括它对对象属性的部分赋值的支持，这是 JavaScript 允许的，而默认 TypeScript 不允许。</p><h2 id="3-使用-Interface"><a href="#3-使用-Interface" class="headerlink" title="3.使用 Interface"></a>3.使用 Interface</h2><p>如果我们使用基本<code>SuperbUser</code>类型的接口，我们会得到相同的结果：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SuperbUser</span> &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">roles</span>: (<span class="string">&#x27;Admin&#x27;</span> | <span class="string">&#x27;Editor&#x27;</span> | <span class="string">&#x27;Author&#x27;</span>)[]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Subscriber</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Omit</span>&lt;<span class="title class_">SuperbUser</span>, <span class="string">&#x27;roles&#x27;</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">subscriber</span>: <span class="title class_">Subscriber</span> = &#123;</span><br><span class="line">  <span class="attr">userId</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">macAddress</span>: <span class="string">&#x27;1.2.3&#x27;</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;xiaan&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;xiaan@163.com&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">subscriber.<span class="property">password</span> = <span class="string">&#x27;12345678&#x27;</span>;</span><br><span class="line">subscriber.<span class="property">firstName</span> = <span class="string">&#x27;an&#x27;</span>;</span><br><span class="line">subscriber.<span class="property">lastName</span> = <span class="string">&#x27;xia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subscriber);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;userId&quot;: 4,</span></span><br><span class="line"><span class="comment">  &quot;macAddress&quot;: &quot;1.2.3&quot;,</span></span><br><span class="line"><span class="comment">  &quot;username&quot;: &quot;xiaan&quot;,</span></span><br><span class="line"><span class="comment">  &quot;email&quot;: &quot;xiaan@163.com&quot;,</span></span><br><span class="line"><span class="comment">  &quot;password&quot;: &quot;12345678&quot;,</span></span><br><span class="line"><span class="comment">  &quot;firstName&quot;: &quot;an&quot;,</span></span><br><span class="line"><span class="comment">  &quot;lastName&quot;: &quot;xia&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>我们还可以将<code>Omit&lt;&gt;</code>的返回类型重构为中介类型<code>StrictSubscriber</code>，并将其作为 TypeScript Partial 的参数传递：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">StrictSubscriber</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">SuperbUser</span>, <span class="string">&#x27;roles&#x27;</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Subscriber</span> = <span class="title class_">Partial</span>;</span><br></pre></td></tr></table></figure><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>在这篇文章中，我们介绍了使用实用转换器 partial 的使用，不过手动将类型的某些属性设置为可选更可取，特别是在处理从 API 返回的类型时。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在本文中，我们将使用&lt;code&gt;Partial&amp;lt;&amp;gt;&lt;/code&gt;来讨论 TypeScript 中的对象类型转换。这是 TypeScript 实用工具类型系列的第三部分。&lt;br&gt;在上一篇文章（&lt;a class=&quot;link&quot;   href=&quot;https://www.</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/categories/TypeScript/"/>
    
    
    <category term="前端" scheme="https://geminglu.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="https://geminglu.github.io/blog/2023/09/28/TypeScript/TypeScript/"/>
    <id>https://geminglu.github.io/blog/2023/09/28/TypeScript/TypeScript/</id>
    <published>2023-09-28T15:23:12.000Z</published>
    <updated>2024-04-16T09:24:28.199Z</updated>
    
    <content type="html"><![CDATA[<p>使用npm安装<br>npm install -g typescript<br>编译<br>tsc helloworld.ts<br>生成配置文件(tsconfig.json)<br>tsc –init</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用npm安装&lt;br&gt;npm install -g typescript&lt;br&gt;编译&lt;br&gt;tsc helloworld.ts&lt;br&gt;生成配置文件(tsconfig.json)&lt;br&gt;tsc –init&lt;/p&gt;
</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/categories/TypeScript/"/>
    
    
    <category term="前端" scheme="https://geminglu.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://geminglu.github.io/blog/tags/TypeScript/"/>
    
  </entry>
  
</feed>
